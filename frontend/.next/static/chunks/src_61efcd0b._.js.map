{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Header.tsx"],"sourcesContent":["const Header = () => {\n    return (\n      <header className=\"flex justify-between items-center w-full px-200 pt-400\">\n        <div className=\"flex items-center gap-100\">\n          <img src=\"/images/logo.svg\" alt=\"Mood tracker logo\" className=\"h-full\" />\n        </div>\n        <img\n          src=\"/images/avatar-placeholder.svg\"\n          alt=\"User avatar\"\n          className=\"w-500 h-500 rounded-full\"\n        />\n      </header>\n    )\n  }\n\n  export default Header;"],"names":[],"mappings":";;;;;AAAA,MAAM,SAAS;IACX,qBACE,6LAAC;QAAO,WAAU;;0BAChB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,KAAI;oBAAmB,KAAI;oBAAoB,WAAU;;;;;;;;;;;0BAEhE,6LAAC;gBACC,KAAI;gBACJ,KAAI;gBACJ,WAAU;;;;;;;;;;;;AAIlB;KAbI;uCAeW","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/api.ts"],"sourcesContent":["import { LogEntry } from '@/types';\nimport { MoodValue } from './moods';\nimport { SleepValue } from './sleep';\n\nexport interface LogFormData {\n  mood: MoodValue | null;\n  feelings: string[];\n  journalEntry: string;\n  sleepHours: SleepValue | null;\n}\n\nconst BASE_URL = 'http://localhost:3001';\n\nexport async function fetchMoods(): Promise<LogEntry[]> {\n  const res = await fetch(`${BASE_URL}/moodEntries`);\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch moods');\n  }\n\n  return res.json();\n}\n\nexport async function submitLog(data: LogFormData) {\n  const payload = {\n    ...data,\n    createdAt: new Date().toISOString(),\n  };\n\n  const res = await fetch(`${BASE_URL}/moodEntries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to submit log');\n  }\n\n  return res.json();\n}\n\nexport async function fetchQuotes() {\n  const res = await fetch(`${BASE_URL}/moodQuotes`);\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch quotes');\n  }\n\n  return res.json();\n}\n"],"names":[],"mappings":";;;;;AAWA,MAAM,WAAW;AAEV,eAAe;IACpB,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,YAAY,CAAC;IAEjD,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,IAAI,IAAI;AACjB;AAEO,eAAe,UAAU,IAAiB;IAC/C,MAAM,UAAU;QACd,GAAG,IAAI;QACP,WAAW,IAAI,OAAO,WAAW;IACnC;IAEA,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,YAAY,CAAC,EAAE;QACjD,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,IAAI,IAAI;AACjB;AAEO,eAAe;IACpB,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,WAAW,CAAC;IAEhD,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,IAAI,IAAI;AACjB","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/store/logStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { LogEntry } from '@/types';\nimport { fetchMoods } from '../lib/api';\n\ninterface LogStore {\n  logs: LogEntry[];\n  fetchLogs: () => Promise<void>;\n  addLog: (log: LogEntry) => void;\n  setLogs: (logs: LogEntry[]) => void;\n  clearLogs: () => void;\n  getLastLog: () => LogEntry | null;\n}\n\nexport const useLogStore = create<LogStore>((set, get) => ({\n  logs: [],\n  fetchLogs: async () => {\n    const logs = await fetchMoods();\n    set({ logs });\n  },\n  addLog: (log) => set((state) => ({ logs: [...state.logs, log] })),\n  setLogs: (logs) => set({ logs }),\n  clearLogs: () => set({ logs: [] }),\n  getLastLog: () => {\n    const logs = get().logs;\n    return logs.length > 0 ? logs[logs.length - 1] : null;\n  },\n}));\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAWO,MAAM,cAAc,CAAA,GAAA,2IAAA,CAAA,SAAM,AAAD,EAAY,CAAC,KAAK,MAAQ,CAAC;QACzD,MAAM,EAAE;QACR,WAAW;YACT,MAAM,OAAO,MAAM,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD;YAC5B,IAAI;gBAAE;YAAK;QACb;QACA,QAAQ,CAAC,MAAQ,IAAI,CAAC,QAAU,CAAC;oBAAE,MAAM;2BAAI,MAAM,IAAI;wBAAE;qBAAI;gBAAC,CAAC;QAC/D,SAAS,CAAC,OAAS,IAAI;gBAAE;YAAK;QAC9B,WAAW,IAAM,IAAI;gBAAE,MAAM,EAAE;YAAC;QAChC,YAAY;YACV,MAAM,OAAO,MAAM,IAAI;YACvB,OAAO,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,MAAM,GAAG,EAAE,GAAG;QACnD;IACF,CAAC","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Button/Button.tsx"],"sourcesContent":["interface ButtonProps {\n  label: string;\n  disabled?: boolean;\n  type?: 'primary' | 'secondary';\n  className?: string;\n  onClick: () => void;\n}\n\nconst Button = ({ label, disabled = false, type = 'primary', className, onClick }: ButtonProps) => {\n  return (\n    <button\n      className={`text-neutral-0 preset-4 rounded-10 cursor-pointer px-400 py-200 font-semibold hover:bg-blue-700 focus:ring-2 focus:ring-blue-300 focus:outline disabled:cursor-not-allowed disabled:bg-blue-200 disabled:opacity-50 ${className} ${\n        type === 'primary'\n          ? 'bg-blue-600 hover:bg-blue-700'\n          : 'bg-neutral-0 text-neutral-900 hover:bg-neutral-50'\n      }`}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {label}\n    </button>\n  );\n};\n\nexport default Button;\n"],"names":[],"mappings":";;;;;AAQA,MAAM,SAAS,CAAC,EAAE,KAAK,EAAE,WAAW,KAAK,EAAE,OAAO,SAAS,EAAE,SAAS,EAAE,OAAO,EAAe;IAC5F,qBACE,6LAAC;QACC,WAAW,CAAC,oNAAoN,EAAE,UAAU,CAAC,EAC3O,SAAS,YACL,kCACA,qDACJ;QACF,SAAS;QACT,UAAU;kBAET;;;;;;AAGP;KAdM;uCAgBS","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/utils/date.ts"],"sourcesContent":["function getOrdinal(day: number): string {\n  if (day > 3 && day < 21) return 'th'; // 11th, 12th, 13th\n  switch (day % 10) {\n    case 1:\n      return 'st';\n    case 2:\n      return 'nd';\n    case 3:\n      return 'rd';\n    default:\n      return 'th';\n  }\n}\n\nexport function formatDateWithOrdinal(date: Date) {\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'long' });\n  const month = date.toLocaleDateString('en-US', { month: 'long' });\n  const day = date.getDate();\n  const year = date.getFullYear();\n  return `${weekday}, ${month} ${day}${getOrdinal(day)}, ${year}`;\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAW,GAAW;IAC7B,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,MAAM,mBAAmB;IACzD,OAAQ,MAAM;QACZ,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEO,SAAS,sBAAsB,IAAU;IAC9C,MAAM,UAAU,KAAK,kBAAkB,CAAC,SAAS;QAAE,SAAS;IAAO;IACnE,MAAM,QAAQ,KAAK,kBAAkB,CAAC,SAAS;QAAE,OAAO;IAAO;IAC/D,MAAM,MAAM,KAAK,OAAO;IACxB,MAAM,OAAO,KAAK,WAAW;IAC7B,OAAO,GAAG,QAAQ,EAAE,EAAE,MAAM,CAAC,EAAE,MAAM,WAAW,KAAK,EAAE,EAAE,MAAM;AACjE","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/moods.ts"],"sourcesContent":["/**\n * Mood tracking utilities and configuration\n *\n * This module provides utilities for managing mood tracking in the mood tracking app.\n * It defines mood value types, configurations, and helper functions for converting between\n * different representations of mood states.\n *\n * The module centralizes mood logic to ensure:\n * - Consistent mood categorization across the application\n * - Type-safe mood value handling\n * - Easy conversion between numeric values and human-readable labels\n * - Standardized mood colors and icons for UI consistency\n * - Comprehensive mood configuration including visual elements\n *\n * @module moods\n */\n\n/**\n * Valid mood values representing different emotional states\n *\n * These values represent the predefined mood categories used throughout the app.\n * Each value corresponds to a specific emotional state with associated visual elements.\n *\n * The values follow a scale from negative to positive emotions:\n * - -2: Very Sad (extreme negative emotion)\n * - -1: Sad (negative emotion)\n * - 0: Neutral (balanced emotion)\n * - 1: Happy (positive emotion)\n * - 2: Very Happy (extreme positive emotion)\n *\n * @example\n * ```typescript\n * const moodValue: MoodValue = 1; // Represents a happy mood\n * ```\n */\nexport type MoodValue = -2 | -1 | 0 | 1 | 2;\n\n/**\n * Configuration object for a mood state\n *\n * This type defines the complete configuration for each mood value,\n * including display properties, colors, and associated icons.\n * Used internally by the moodMap to provide consistent mood representation.\n *\n * @property value - The numeric mood value\n * @property label - Human-readable mood label\n * @property color - Tailwind CSS class for background color\n * @property colorHex - Hexadecimal color value\n * @property icon - Object containing paths to white and colored icon variants\n */\ntype MoodConfig = {\n  value: MoodValue;\n  label: string;\n  color: string;\n  colorHex: string;\n  icon: {\n    white: string;\n    color: string;\n  };\n};\n\n/**\n * Complete mapping of mood values to their configurations\n *\n * This constant provides a comprehensive lookup table for all mood states,\n * including their display properties, colors, and icon assets. Used throughout\n * the UI for consistent mood representation and styling.\n *\n * Each mood configuration includes:\n * - Visual styling (colors and Tailwind classes)\n * - Display labels for user interfaces\n * - Icon assets for both white and colored variants\n *\n * @example\n * ```typescript\n * import { moodMap } from './moods';\n *\n * const happyMood = moodMap[1];\n * console.log(happyMood.label); // Output: \"Happy\"\n * console.log(happyMood.color); // Output: \"bg-green-300\"\n * console.log(happyMood.icon.color); // Output: \"/images/icon-happy-color.svg\"\n * ```\n */\nexport const moodMap: Record<MoodValue, MoodConfig> = {\n  [-2]: {\n    value: -2,\n    label: 'Very Sad',\n    color: 'bg-red-300',\n    colorHex: '#FFB9B9',\n    icon: {\n      white: '/images/icon-very-sad-white.svg',\n      color: '/images/icon-very-sad-color.svg',\n    },\n  },\n  [-1]: {\n    value: -1,\n    label: 'Sad',\n    color: 'bg-indigo-200',\n    colorHex: '#B8B1FF',\n    icon: {\n      white: '/images/icon-sad-white.svg',\n      color: '/images/icon-sad-color.svg',\n    },\n  },\n  [0]: {\n    value: 0,\n    label: 'Neutral',\n    color: 'bg-blue-300',\n    colorHex: '#89CAFF',\n    icon: {\n      white: '/images/icon-neutral-white.svg',\n      color: '/images/icon-neutral-color.svg',\n    },\n  },\n  [1]: {\n    value: 1,\n    label: 'Happy',\n    color: 'bg-green-300',\n    colorHex: '#89E780',\n    icon: {\n      white: '/images/icon-happy-white.svg',\n      color: '/images/icon-happy-color.svg',\n    },\n  },\n  [2]: {\n    value: 2,\n    label: 'Very Happy',\n    color: 'bg-amber-300',\n    colorHex: '#FFC97C',\n    icon: {\n      white: '/images/icon-very-happy-white.svg',\n      color: '/images/icon-very-happy-color.svg',\n    },\n  },\n};\n\n/**\n * Converts a mood value to its complete configuration object\n *\n * This utility function provides a convenient way to get the full configuration\n * for any valid mood value. It's the preferred method for accessing mood\n * properties including labels, colors, and icon paths.\n *\n * @param value - The mood value (-2, -1, 0, 1, or 2)\n * @returns The complete mood configuration object containing label, colors, and icons\n *\n * @example\n * ```typescript\n * import { getMood } from './moods';\n *\n * const moodConfig = getMood(1);\n * console.log(moodConfig.label); // Output: \"Happy\"\n * console.log(moodConfig.color); // Output: \"bg-green-300\"\n *\n * // Use in React components\n * const mood = getMood(selectedMoodValue);\n * return (\n *   <div className={mood.color}>\n *     <img src={mood.icon.color} alt={mood.label} />\n *     <span>{mood.label}</span>\n *   </div>\n * );\n * ```\n *\n * @throws {TypeError} If the value is not a valid MoodValue\n */\nexport function getMood(value: MoodValue): MoodConfig {\n  return moodMap[value];\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;CAeC,GAED;;;;;;;;;;;;;;;;;CAiBC;;;;AAiDM,MAAM,UAAyC;IACpD,CAAC,CAAC,EAAE,EAAE;QACJ,OAAO,CAAC;QACR,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,CAAC,EAAE,EAAE;QACJ,OAAO,CAAC;QACR,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,EAAE,EAAE;QACH,OAAO;QACP,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,EAAE,EAAE;QACH,OAAO;QACP,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,EAAE,EAAE;QACH,OAAO;QACP,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;AACF;AAgCO,SAAS,QAAQ,KAAgB;IACtC,OAAO,OAAO,CAAC,MAAM;AACvB","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Container.tsx"],"sourcesContent":["import React from 'react';\n\ninterface ContainerProps {\n  children: React.ReactNode;\n  as?: React.ElementType;\n  className?: string;\n}\n\nconst Container = ({ children, as: Component = 'div', className }: ContainerProps) => {\n  return (\n    <Component\n      className={`${className} rounded-16 bg-neutral-0 flex w-full flex-col gap-300 border border-blue-100 px-200 py-250`}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Container;\n"],"names":[],"mappings":";;;;;AAQA,MAAM,YAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,YAAY,KAAK,EAAE,SAAS,EAAkB;IAC/E,qBACE,6LAAC;QACC,WAAW,GAAG,UAAU,0FAA0F,CAAC;kBAElH;;;;;;AAGP;KARM;uCAUS","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/store/quoteStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { MoodValue } from '../lib/moods';\nimport { fetchQuotes } from '../lib/api';\n\ninterface QuoteStore {\n  quotes: Record<MoodValue, string[]>;\n  fetchQuotes: () => Promise<void>;\n  getRandomQuoteForMood: (mood: MoodValue) => string | null;\n}\n\nexport const useQuoteStore = create<QuoteStore>((set, get) => ({\n  quotes: {\n    [-2]: [],\n    [-1]: [],\n    0: [],\n    1: [],\n    2: [],\n  },\n  fetchQuotes: async () => {\n    const quotes = await fetchQuotes();\n    set({ quotes: quotes });\n  },\n  getRandomQuoteForMood: (mood: MoodValue) => {\n    const quotes = get().quotes[mood];\n    if (!quotes || quotes.length === 0) return null;\n    const i = Math.floor(Math.random() * quotes.length);\n    return quotes[i];\n  },\n}));\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAQO,MAAM,gBAAgB,CAAA,GAAA,2IAAA,CAAA,SAAM,AAAD,EAAc,CAAC,KAAK,MAAQ,CAAC;QAC7D,QAAQ;YACN,CAAC,CAAC,EAAE,EAAE,EAAE;YACR,CAAC,CAAC,EAAE,EAAE,EAAE;YACR,GAAG,EAAE;YACL,GAAG,EAAE;YACL,GAAG,EAAE;QACP;QACA,aAAa;YACX,MAAM,SAAS,MAAM,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;YAC/B,IAAI;gBAAE,QAAQ;YAAO;QACvB;QACA,uBAAuB,CAAC;YACtB,MAAM,SAAS,MAAM,MAAM,CAAC,KAAK;YACjC,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG,OAAO;YAC3C,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,MAAM;YAClD,OAAO,MAAM,CAAC,EAAE;QAClB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Greetings/MoodCard.tsx"],"sourcesContent":["import { getMood, MoodValue } from '@/app/lib/moods';\nimport Container from '../Container';\nimport { useQuoteStore } from '@/app/store/quoteStore';\n\ninterface MoodCardProps {\n  mood: MoodValue;\n}\n\nconst MoodCard = ({ mood }: MoodCardProps) => {\n  const { getRandomQuoteForMood } = useQuoteStore();\n  const moodConfig = getMood(mood);\n  const quote = getRandomQuoteForMood(mood);\n\n  return (\n    <Container\n      as=\"section\"\n      className=\"relative w-full items-center justify-center overflow-hidden md:items-start md:justify-between lg:col-span-2 lg:h-[340px] lg:p-400\"\n    >\n      <div className=\"flex flex-col gap-100\">\n        <p className=\"preset-3 text-left font-bold text-neutral-600\">I'm feeling</p>\n        <p className=\"preset-2 text-left font-bold text-neutral-900\">{moodConfig.label}</p>\n      </div>\n\n      <img\n        src={moodConfig.icon.color}\n        alt={moodConfig.label}\n        className=\"h-[200px] w-[200px] md:absolute md:-bottom-1/8 md:left-3/4 md:h-[320px] md:w-[320px] md:-translate-x-1/2\"\n      />\n\n      <div className=\"flex flex-col gap-150 md:w-1/2\">\n        <img src=\"/images/icon-quote.svg\" aria-hidden=\"true\" className=\"h-300 w-300\" />\n        <p className=\"preset-6-italic text-left text-neutral-600\">&ldquo;{quote}&rdquo;</p>\n      </div>\n    </Container>\n  );\n};\n\nexport default MoodCard;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;AAMA,MAAM,WAAW,CAAC,EAAE,IAAI,EAAiB;;IACvC,MAAM,EAAE,qBAAqB,EAAE,GAAG,CAAA,GAAA,oIAAA,CAAA,gBAAa,AAAD;IAC9C,MAAM,aAAa,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE;IAC3B,MAAM,QAAQ,sBAAsB;IAEpC,qBACE,6LAAC,kIAAA,CAAA,UAAS;QACR,IAAG;QACH,WAAU;;0BAEV,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAE,WAAU;kCAAgD;;;;;;kCAC7D,6LAAC;wBAAE,WAAU;kCAAiD,WAAW,KAAK;;;;;;;;;;;;0BAGhF,6LAAC;gBACC,KAAK,WAAW,IAAI,CAAC,KAAK;gBAC1B,KAAK,WAAW,KAAK;gBACrB,WAAU;;;;;;0BAGZ,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,KAAI;wBAAyB,eAAY;wBAAO,WAAU;;;;;;kCAC/D,6LAAC;wBAAE,WAAU;;4BAA6C;4BAAQ;4BAAM;;;;;;;;;;;;;;;;;;;AAIhF;GA3BM;;QAC8B,oIAAA,CAAA,gBAAa;;;KAD3C;uCA6BS","debugId":null}},
    {"offset": {"line": 489, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/sleep.ts"],"sourcesContent":["/**\n * Sleep tracking utilities and configuration\n *\n * This module provides utilities for managing sleep duration tracking in the mood tracking app.\n * It defines sleep value types, mappings, and helper functions for converting between\n * different representations of sleep duration.\n *\n * The module centralizes sleep duration logic to ensure:\n * - Consistent sleep duration categorization across the application\n * - Type-safe sleep value handling\n * - Easy conversion between numeric values and human-readable labels\n * - Standardized sleep duration ranges for user input and display\n *\n * @module sleep\n */\n\n/**\n * Valid sleep duration values in hours\n *\n * These values represent the predefined sleep duration categories used throughout the app.\n * Each value corresponds to a specific range of sleep hours for consistent tracking.\n *\n * The values are chosen to represent meaningful sleep duration ranges:\n * - 1: Very short sleep (0-2 hours)\n * - 3.5: Short sleep (2-4 hours)\n * - 5.5: Below recommended sleep (5-6 hours)\n * - 7.5: Recommended sleep (7-8 hours)\n * - 9: Extended sleep (9+ hours)\n *\n * @example\n * ```typescript\n * const sleepValue: SleepValue = 7.5; // Represents 7-8 hours of sleep\n * ```\n */\nexport type SleepValue = 1 | 3.5 | 5.5 | 7.5 | 9;\n\n/**\n * Mapping from sleep values to human-readable duration ranges\n *\n * This constant provides a lookup table for converting numeric sleep values\n * to user-friendly display labels. Used throughout the UI for consistent\n * sleep duration representation.\n *\n * @example\n * ```typescript\n * import { sleepMap } from './sleep';\n * console.log(sleepMap[7.5]); // Output: \"7-8 hours\"\n * ```\n */\nexport const sleepMap: Record<SleepValue, string> = {\n  1: '0-2 hours',\n  3.5: '2-4 hours',\n  5.5: '5-6 hours',\n  7.5: '7-8 hours',\n  9: '9+ hours',\n};\n\n/**\n * Array of all valid sleep values in ascending order\n *\n * This array is useful for UI components like sliders, step selectors,\n * or dropdown menus that need to iterate through all available sleep options.\n * The values are ordered from lowest to highest for intuitive user experience.\n *\n * @example\n * ```typescript\n * import { sleepSteps } from './sleep';\n *\n * // Use in a slider component\n * sleepSteps.forEach((step, index) => {\n *   console.log(`Step ${index + 1}: ${step} hours`);\n * });\n * ```\n */\nexport const sleepSteps: SleepValue[] = [1, 3.5, 5.5, 7.5, 9];\n\n/**\n * Mapping from sleep values to their corresponding index positions (1-based)\n *\n * This mapping is useful for database storage, API communication, or any scenario\n * where you need to convert sleep values to sequential integer indices.\n * The indices start at 1 to avoid confusion with zero-based arrays.\n *\n * @example\n * ```typescript\n * import { sleepIndexMap } from './sleep';\n *\n * // Convert sleep value to index for database storage\n * const sleepValue: SleepValue = 7.5;\n * const index = sleepIndexMap[sleepValue]; // Returns 4\n * ```\n */\nexport const sleepIndexMap: Record<SleepValue, number> = {\n  1: 1,\n  3.5: 2,\n  5.5: 3,\n  7.5: 4,\n  9: 5,\n};\n\n/**\n * Converts a sleep value to a human-readable label\n *\n * This utility function provides a convenient way to get the display label\n * for any valid sleep duration value. It's the preferred method for\n * converting sleep values to user-facing text.\n *\n * @param value - The sleep duration value (1, 3.5, 5.5, 7.5, or 9)\n * @returns The corresponding sleep duration label as a string\n *\n * @example\n * ```typescript\n * import { getSleep } from './sleep';\n *\n * const label = getSleep(5.5); // Returns \"5-6 hours\"\n * console.log(`You slept ${label} last night`);\n *\n * // Use in UI components\n * const sleepLabel = getSleep(selectedSleepValue);\n * ```\n *\n * @throws {TypeError} If the value is not a valid SleepValue\n */\nexport function getSleep(value: SleepValue): string {\n  return sleepMap[value];\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAED;;;;;;;;;;;;;;;;;CAiBC;;;;;;AAgBM,MAAM,WAAuC;IAClD,GAAG;IACH,KAAK;IACL,KAAK;IACL,KAAK;IACL,GAAG;AACL;AAmBO,MAAM,aAA2B;IAAC;IAAG;IAAK;IAAK;IAAK;CAAE;AAkBtD,MAAM,gBAA4C;IACvD,GAAG;IACH,KAAK;IACL,KAAK;IACL,KAAK;IACL,GAAG;AACL;AAyBO,SAAS,SAAS,KAAiB;IACxC,OAAO,QAAQ,CAAC,MAAM;AACxB","debugId":null}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Greetings/SleepCard.tsx"],"sourcesContent":["import { getSleep, SleepValue } from '@/app/lib/sleep';\nimport Container from '../Container';\n\ninterface SleepCardProps {\n  sleep: SleepValue;\n}\n\nconst SleepCard = ({ sleep }: SleepCardProps) => {\n  const label = getSleep(sleep);\n\n  return (\n    <Container as=\"section\" className=\"w-full gap-200 lg:col-span-1\">\n      <h3 className=\"preset-6 flex items-center gap-150 text-left font-bold text-neutral-600\">\n        <img src=\"/images/icon-sleep.svg\" aria-hidden=\"true\" className=\"h-300 w-300\" />\n        Sleep\n      </h3>\n      <p className=\"preset-3 text-left text-neutral-900\">{label}</p>\n    </Container>\n  );\n};\n\nexport default SleepCard;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAMA,MAAM,YAAY,CAAC,EAAE,KAAK,EAAkB;IAC1C,MAAM,QAAQ,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD,EAAE;IAEvB,qBACE,6LAAC,kIAAA,CAAA,UAAS;QAAC,IAAG;QAAU,WAAU;;0BAChC,6LAAC;gBAAG,WAAU;;kCACZ,6LAAC;wBAAI,KAAI;wBAAyB,eAAY;wBAAO,WAAU;;;;;;oBAAgB;;;;;;;0BAGjF,6LAAC;gBAAE,WAAU;0BAAuC;;;;;;;;;;;;AAG1D;KAZM;uCAcS","debugId":null}},
    {"offset": {"line": 621, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Greetings/Greetings.tsx"],"sourcesContent":["import { useLogStore } from '@/app/store/logStore';\nimport Button from '../Button/Button';\nimport { formatDateWithOrdinal } from '@/app/lib/utils/date';\nimport MoodCard from './MoodCard';\nimport { MoodValue } from '@/app/lib/moods';\nimport SleepCard from './SleepCard';\nimport { SleepValue } from '@/app/lib/sleep';\n\ninterface GreetingProps {\n  className?: string;\n  onOpenLogModal: () => void;\n}\n\nconst Greeting = ({ className, onOpenLogModal }: GreetingProps) => {\n  const { getLastLog } = useLogStore();\n  const lastLog = getLastLog();\n\n  const hasLoggedToday =\n    lastLog?.createdAt.split('T')[0] === new Date().toISOString().split('T')[0];\n\n  const today = formatDateWithOrdinal(new Date());\n\n  return (\n    <div className={`flex flex-col items-center justify-center gap-200 text-center ${className}`}>\n      <p className=\"preset-3-mobile md:preset-3 font-bold text-blue-600\">Hello, Lisa!</p>\n      <h1 className=\"preset-1-mobile md:preset-1 font-bold text-neutral-900\">\n        How are you feeling today?\n      </h1>\n      <p className=\"preset-6 text-neutral-600\">{today}</p>\n      {!hasLoggedToday ? (\n        <Button label=\"Log today's mood\" onClick={onOpenLogModal} />\n      ) : (\n        <div className=\"grid w-full grid-cols-1 gap-400 lg:grid-cols-3\">\n          <MoodCard mood={lastLog?.mood as MoodValue} />\n          <SleepCard sleep={lastLog?.sleepHours as SleepValue} />\n          {/*\n            <ReflectionCard reflection={lastLog?.reflection} /> */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Greeting;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA,MAAM,WAAW,CAAC,EAAE,SAAS,EAAE,cAAc,EAAiB;;IAC5D,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IACjC,MAAM,UAAU;IAEhB,MAAM,iBACJ,SAAS,UAAU,MAAM,IAAI,CAAC,EAAE,KAAK,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAE7E,MAAM,QAAQ,CAAA,GAAA,qIAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI;IAExC,qBACE,6LAAC;QAAI,WAAW,CAAC,8DAA8D,EAAE,WAAW;;0BAC1F,6LAAC;gBAAE,WAAU;0BAAsD;;;;;;0BACnE,6LAAC;gBAAG,WAAU;0BAAyD;;;;;;0BAGvE,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YACzC,CAAC,+BACA,6LAAC,yIAAA,CAAA,UAAM;gBAAC,OAAM;gBAAmB,SAAS;;;;;qCAE1C,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,8IAAA,CAAA,UAAQ;wBAAC,MAAM,SAAS;;;;;;kCACzB,6LAAC,+IAAA,CAAA,UAAS;wBAAC,OAAO,SAAS;;;;;;;;;;;;;;;;;;AAOrC;GA5BM;;QACmB,kIAAA,CAAA,cAAW;;;KAD9B;uCA8BS","debugId":null}},
    {"offset": {"line": 725, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/TrendChart/CustomXAxisTick.tsx"],"sourcesContent":["const CustomXAxisTick = ({ x, y, payload }: any) => {\n  const date = new Date(payload.value);\n  const month = date.toLocaleDateString('en-US', { month: 'long' }); // e.g. \"April\"\n  const day = date.getDate(); // e.g. 12\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={12} dy={-4} textAnchor=\"middle\" fontSize=\"12\" fill=\"#12114D\">\n        {month}\n      </text>\n      <text x={0} y={24} textAnchor=\"middle\" fontSize=\"13\" fontWeight=\"semibold\" fill=\"#12114D\">\n        {day}\n      </text>\n    </g>\n  );\n};\n\nexport default CustomXAxisTick;\n"],"names":[],"mappings":";;;;;AAAA,MAAM,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAO;IAC7C,MAAM,OAAO,IAAI,KAAK,QAAQ,KAAK;IACnC,MAAM,QAAQ,KAAK,kBAAkB,CAAC,SAAS;QAAE,OAAO;IAAO,IAAI,eAAe;IAClF,MAAM,MAAM,KAAK,OAAO,IAAI,UAAU;IAEtC,qBACE,6LAAC;QAAE,WAAW,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;;0BAClC,6LAAC;gBAAK,GAAG;gBAAG,GAAG;gBAAI,IAAI,CAAC;gBAAG,YAAW;gBAAS,UAAS;gBAAK,MAAK;0BAC/D;;;;;;0BAEH,6LAAC;gBAAK,GAAG;gBAAG,GAAG;gBAAI,YAAW;gBAAS,UAAS;gBAAK,YAAW;gBAAW,MAAK;0BAC7E;;;;;;;;;;;;AAIT;KAfM;uCAiBS","debugId":null}},
    {"offset": {"line": 785, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/TrendChart/CustomYAxisTick.tsx"],"sourcesContent":["import { getSleep, sleepSteps } from '@/app/lib/sleep';\n/**\n * Custom Y-axis tick component for the trend chart\n *\n * This component renders custom tick labels for the Y-axis of the sleep trend chart.\n * It displays sleep duration labels with a sleep icon for each tick value.\n *\n * @param x - The x coordinate for positioning the tick (provided by Recharts)\n * @param y - The y coordinate for positioning the tick (provided by Recharts)\n * @param payload - The tick payload containing the value and other metadata (provided by Recharts)\n * @returns JSX element representing the custom tick or null for index 0\n *\n * @example\n * <CustomYAxisTick x={50} y={100} payload={{ value: 2 }} />\n * // Renders: [sleep icon] \"2-4 hours\"\n */\n\nconst CustomYAxisTick = ({ x, y, payload }: any) => {\n  const index = payload.value;\n\n  if (index === 0) {\n    return null;\n  }\n\n  const sleepValue = sleepSteps[index - 1];\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <image href=\"/images/icon-sleep.svg\" x={-60} y={-5} width={10} height={10} fill=\"#57577B\" />\n      <text x={-44} y={0} textAnchor=\"start\" fontSize=\"12\" fill=\"#57577B\" dominantBaseline=\"middle\">\n        {getSleep(sleepValue)}\n      </text>\n    </g>\n  );\n};\n\nexport default CustomYAxisTick;\n"],"names":[],"mappings":";;;;AAAA;;;AACA;;;;;;;;;;;;;;CAcC,GAED,MAAM,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAO;IAC7C,MAAM,QAAQ,QAAQ,KAAK;IAE3B,IAAI,UAAU,GAAG;QACf,OAAO;IACT;IAEA,MAAM,aAAa,6HAAA,CAAA,aAAU,CAAC,QAAQ,EAAE;IACxC,qBACE,6LAAC;QAAE,WAAW,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;;0BAClC,6LAAC;gBAAM,MAAK;gBAAyB,GAAG,CAAC;gBAAI,GAAG,CAAC;gBAAG,OAAO;gBAAI,QAAQ;gBAAI,MAAK;;;;;;0BAChF,6LAAC;gBAAK,GAAG,CAAC;gBAAI,GAAG;gBAAG,YAAW;gBAAQ,UAAS;gBAAK,MAAK;gBAAU,kBAAiB;0BAClF,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD,EAAE;;;;;;;;;;;;AAIlB;KAhBM;uCAkBS","debugId":null}},
    {"offset": {"line": 860, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/TrendChart/CustomTooltip.tsx"],"sourcesContent":["import { getMood, MoodValue } from '@/app/lib/moods';\nimport { getSleep, SleepValue } from '@/app/lib/sleep';\nimport type { LogEntry } from '@/types';\n\ninterface TooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    payload: LogEntry;\n  }>;\n}\n\ninterface TooltipSectionProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nconst TOOLTIP_CLASSES = {\n  container:\n    'rounded-10 flex max-w-[175px] flex-col gap-150 border border-blue-100 bg-white p-150 text-sm text-neutral-800 shadow-lg',\n  section: 'gap-075 flex flex-col',\n  title: 'preset-8 text-neutral-800',\n  content: 'preset-7 text-neutral-900',\n  moodContent: 'preset-7 flex items-center gap-100 text-neutral-900',\n  reflectionContent: 'preset-7 whitespace-pre-wrap text-neutral-900',\n  moodIcon: 'h-200 w-200',\n} as const;\n\nconst TooltipSection = ({ title, children }: TooltipSectionProps) => (\n  <div className={TOOLTIP_CLASSES.section}>\n    <p className={TOOLTIP_CLASSES.title}>{title}</p>\n    {children}\n  </div>\n);\n\nconst CustomTooltip = ({ active, payload }: TooltipProps) => {\n  if (!active || !payload || payload.length === 0) {\n    return null;\n  }\n\n  const logEntry: LogEntry = payload[0].payload;\n\n  try {\n    const mood = getMood(logEntry.mood as MoodValue);\n    const sleep = getSleep(logEntry.sleepHours as SleepValue);\n\n    return (\n      <div className={TOOLTIP_CLASSES.container}>\n        <TooltipSection title=\"Mood\">\n          <p className={TOOLTIP_CLASSES.moodContent}>\n            <img src={mood.icon.color} alt={mood.label} className={TOOLTIP_CLASSES.moodIcon} />\n            {mood.label}\n          </p>\n        </TooltipSection>\n\n        <TooltipSection title=\"Sleep\">\n          <p className={TOOLTIP_CLASSES.content}>{sleep}</p>\n        </TooltipSection>\n\n        <TooltipSection title=\"Reflection\">\n          <p className={TOOLTIP_CLASSES.reflectionContent}>{logEntry.journalEntry}</p>\n        </TooltipSection>\n\n        {logEntry.feelings && logEntry.feelings.length > 0 && (\n          <TooltipSection title=\"Tags\">\n            <p className={TOOLTIP_CLASSES.content}>{logEntry.feelings.join(', ')}</p>\n          </TooltipSection>\n        )}\n      </div>\n    );\n  } catch (error) {\n    console.error('Error rendering tooltip:', error);\n    return null;\n  }\n};\n\nexport default CustomTooltip;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAeA,MAAM,kBAAkB;IACtB,WACE;IACF,SAAS;IACT,OAAO;IACP,SAAS;IACT,aAAa;IACb,mBAAmB;IACnB,UAAU;AACZ;AAEA,MAAM,iBAAiB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAuB,iBAC9D,6LAAC;QAAI,WAAW,gBAAgB,OAAO;;0BACrC,6LAAC;gBAAE,WAAW,gBAAgB,KAAK;0BAAG;;;;;;YACrC;;;;;;;KAHC;AAON,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,OAAO,EAAgB;IACtD,IAAI,CAAC,UAAU,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;QAC/C,OAAO;IACT;IAEA,MAAM,WAAqB,OAAO,CAAC,EAAE,CAAC,OAAO;IAE7C,IAAI;QACF,MAAM,OAAO,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE,SAAS,IAAI;QAClC,MAAM,QAAQ,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD,EAAE,SAAS,UAAU;QAE1C,qBACE,6LAAC;YAAI,WAAW,gBAAgB,SAAS;;8BACvC,6LAAC;oBAAe,OAAM;8BACpB,cAAA,6LAAC;wBAAE,WAAW,gBAAgB,WAAW;;0CACvC,6LAAC;gCAAI,KAAK,KAAK,IAAI,CAAC,KAAK;gCAAE,KAAK,KAAK,KAAK;gCAAE,WAAW,gBAAgB,QAAQ;;;;;;4BAC9E,KAAK,KAAK;;;;;;;;;;;;8BAIf,6LAAC;oBAAe,OAAM;8BACpB,cAAA,6LAAC;wBAAE,WAAW,gBAAgB,OAAO;kCAAG;;;;;;;;;;;8BAG1C,6LAAC;oBAAe,OAAM;8BACpB,cAAA,6LAAC;wBAAE,WAAW,gBAAgB,iBAAiB;kCAAG,SAAS,YAAY;;;;;;;;;;;gBAGxE,SAAS,QAAQ,IAAI,SAAS,QAAQ,CAAC,MAAM,GAAG,mBAC/C,6LAAC;oBAAe,OAAM;8BACpB,cAAA,6LAAC;wBAAE,WAAW,gBAAgB,OAAO;kCAAG,SAAS,QAAQ,CAAC,IAAI,CAAC;;;;;;;;;;;;;;;;;IAKzE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;IACT;AACF;MAvCM;uCAyCS","debugId":null}},
    {"offset": {"line": 1004, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/TrendChart/TrendChart.tsx"],"sourcesContent":["'use client';\nimport Container from '../Container';\nimport { LogEntry } from '@/types';\nimport {\n  BarChart,\n  Bar,\n  YAxis,\n  XAxis,\n  Cell,\n  ResponsiveContainer,\n  LabelList,\n  ReferenceLine,\n  Tooltip,\n} from 'recharts';\nimport { getMood, MoodValue } from '@/app/lib/moods';\nimport CustomXAxisTick from './CustomXAxisTick';\nimport CustomYAxisTick from './CustomYAxisTick';\nimport { sleepIndexMap, SleepValue } from '@/app/lib/sleep';\nimport CustomTooltip from './CustomTooltip';\n\ninterface TrendChartProps {\n  className?: string;\n  logs: LogEntry[];\n}\n\nconst TrendChart = ({ className, logs }: TrendChartProps) => {\n  const transformedLogs = logs.map((log) => ({\n    ...log,\n    sleepIndex: sleepIndexMap[log.sleepHours as SleepValue],\n  }));\n\n  // Get the data that will actually be rendered in the chart\n  const chartData = transformedLogs.slice(-11);\n\n  console.log('transformedLogs', transformedLogs);\n\n  return (\n    <Container as=\"section\" className={className}>\n      <h2 className=\"preset-3-mobile md:preset-3 font-semibold text-neutral-900\">\n        Mood and sleep trends\n      </h2>\n      {transformedLogs && transformedLogs.length > 0 && (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={chartData} margin={{ top: 20, right: 10, bottom: 10, left: 10 }}>\n            {[1, 2, 3, 4, 5].map((i) => (\n              <ReferenceLine key={i} y={i} stroke=\"#E0E6FA\" strokeWidth={1} />\n            ))}\n            <YAxis\n              type=\"number\"\n              domain={[0, 5]}\n              ticks={[0, 1, 2, 3, 4, 5]}\n              axisLine={false}\n              tickLine={false}\n              tick={<CustomYAxisTick />}\n            />\n            <XAxis\n              dataKey=\"createdAt\"\n              axisLine={false}\n              tickLine={false}\n              interval={0}\n              tick={<CustomXAxisTick />}\n            />\n            <Tooltip content={<CustomTooltip />} cursor={{ fill: 'transparent' }} />\n            <Bar dataKey=\"sleepIndex\" radius={[30, 30, 30, 30]} barSize={40}>\n              <LabelList\n                dataKey=\"mood\"\n                content={({ x, y, value }) => {\n                  const mood = getMood(value as MoodValue);\n                  return (\n                    <image\n                      href={mood.icon.white}\n                      x={Number(x) + 5}\n                      y={Number(y) + 5}\n                      width={30}\n                      height={30}\n                    />\n                  );\n                }}\n              />\n              {chartData.map((entry, index) => {\n                const mood = getMood(entry.mood as MoodValue);\n                console.log('entry', entry);\n                console.log('mood', mood);\n                return <Cell key={`${entry.createdAt}-${index}`} fill={mood.colorHex} />;\n              })}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default TrendChart;\n"],"names":[],"mappings":";;;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;;;AAyBA,MAAM,aAAa,CAAC,EAAE,SAAS,EAAE,IAAI,EAAmB;IACtD,MAAM,kBAAkB,KAAK,GAAG,CAAC,CAAC,MAAQ,CAAC;YACzC,GAAG,GAAG;YACN,YAAY,6HAAA,CAAA,gBAAa,CAAC,IAAI,UAAU,CAAe;QACzD,CAAC;IAED,2DAA2D;IAC3D,MAAM,YAAY,gBAAgB,KAAK,CAAC,CAAC;IAEzC,QAAQ,GAAG,CAAC,mBAAmB;IAE/B,qBACE,6LAAC,kIAAA,CAAA,UAAS;QAAC,IAAG;QAAU,WAAW;;0BACjC,6LAAC;gBAAG,WAAU;0BAA6D;;;;;;YAG1E,mBAAmB,gBAAgB,MAAM,GAAG,mBAC3C,6LAAC,sKAAA,CAAA,sBAAmB;gBAAC,OAAM;gBAAO,QAAO;0BACvC,cAAA,6LAAC,uJAAA,CAAA,WAAQ;oBAAC,MAAM;oBAAW,QAAQ;wBAAE,KAAK;wBAAI,OAAO;wBAAI,QAAQ;wBAAI,MAAM;oBAAG;;wBAC3E;4BAAC;4BAAG;4BAAG;4BAAG;4BAAG;yBAAE,CAAC,GAAG,CAAC,CAAC,kBACpB,6LAAC,gKAAA,CAAA,gBAAa;gCAAS,GAAG;gCAAG,QAAO;gCAAU,aAAa;+BAAvC;;;;;sCAEtB,6LAAC,wJAAA,CAAA,QAAK;4BACJ,MAAK;4BACL,QAAQ;gCAAC;gCAAG;6BAAE;4BACd,OAAO;gCAAC;gCAAG;gCAAG;gCAAG;gCAAG;gCAAG;6BAAE;4BACzB,UAAU;4BACV,UAAU;4BACV,oBAAM,6LAAC,sJAAA,CAAA,UAAe;;;;;;;;;;sCAExB,6LAAC,wJAAA,CAAA,QAAK;4BACJ,SAAQ;4BACR,UAAU;4BACV,UAAU;4BACV,UAAU;4BACV,oBAAM,6LAAC,sJAAA,CAAA,UAAe;;;;;;;;;;sCAExB,6LAAC,0JAAA,CAAA,UAAO;4BAAC,uBAAS,6LAAC,oJAAA,CAAA,UAAa;;;;;4BAAK,QAAQ;gCAAE,MAAM;4BAAc;;;;;;sCACnE,6LAAC,sJAAA,CAAA,MAAG;4BAAC,SAAQ;4BAAa,QAAQ;gCAAC;gCAAI;gCAAI;gCAAI;6BAAG;4BAAE,SAAS;;8CAC3D,6LAAC,4JAAA,CAAA,YAAS;oCACR,SAAQ;oCACR,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE;wCACvB,MAAM,OAAO,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE;wCACrB,qBACE,6LAAC;4CACC,MAAM,KAAK,IAAI,CAAC,KAAK;4CACrB,GAAG,OAAO,KAAK;4CACf,GAAG,OAAO,KAAK;4CACf,OAAO;4CACP,QAAQ;;;;;;oCAGd;;;;;;gCAED,UAAU,GAAG,CAAC,CAAC,OAAO;oCACrB,MAAM,OAAO,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE,MAAM,IAAI;oCAC/B,QAAQ,GAAG,CAAC,SAAS;oCACrB,QAAQ,GAAG,CAAC,QAAQ;oCACpB,qBAAO,6LAAC,uJAAA,CAAA,OAAI;wCAAqC,MAAM,KAAK,QAAQ;uCAAlD,GAAG,MAAM,SAAS,CAAC,CAAC,EAAE,OAAO;;;;;gCACjD;;;;;;;;;;;;;;;;;;;;;;;;AAOd;KAlEM;uCAoES","debugId":null}},
    {"offset": {"line": 1214, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/utils/utils.ts"],"sourcesContent":["import { LogEntry, TendencyType } from '@/types';\nimport { MoodValue } from '../moods';\nimport { SleepValue } from '../sleep';\n\n/**\n * Calculates the average mood of the last 5 mood entries (by createdAt descending).\n * @param moods Array of MoodEntry objects\n * @returns Average mood (number) or null if fewer than 5 entries\n */\nexport function getAverageMoodLast5Days(moods: LogEntry[]): MoodValue | null {\n  if (!Array.isArray(moods) || moods.length < 5) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...moods].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const sum = last5.reduce((acc, entry) => acc + entry.mood, 0);\n  const avg = Math.round(sum / 5) as MoodValue;\n  return avg;\n}\n\nfunction roundToSleepValue(value: number): SleepValue {\n  if (value < 2) return 1;\n  if (value < 4) return 3.5;\n  if (value < 6) return 5.5;\n  if (value < 8) return 7.5;\n  return 9;\n}\n\n/**\n * Calculates the average sleep hours of the last 5 check-ins (by createdAt descending).\n * @param logs Array of LogEntry objects\n * @returns Average sleep hours (number) or null if fewer than 5 entries\n */\nexport function getAverageSleepLast5Days(logs: LogEntry[]): SleepValue | null {\n  if (!Array.isArray(logs) || logs.length < 5) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...logs].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const sum = last5.reduce((acc, entry) => acc + entry.sleepHours, 0);\n  const avg = Math.round(sum / 5);\n  return roundToSleepValue(avg);\n}\n\n/**\n * Compares the average mood of the last 5 check-ins with the previous 5.\n * @param entries Array of MoodEntry objects\n * @returns 'increase', 'decrease', or 'equal' for mood comparison\n */\nexport function compareLast5WithPrevious5Mood(entries: LogEntry[]): TendencyType {\n  if (!Array.isArray(entries) || entries.length < 10) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...entries].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const prev5 = sorted.slice(5, 10);\n\n  const avgMood = (arr: LogEntry[]) => arr.reduce((acc, entry) => acc + entry.mood, 0) / arr.length;\n  const last5Mood = avgMood(last5);\n  const prev5Mood = avgMood(prev5);\n\n  if (last5Mood > prev5Mood) return 'increase';\n  if (last5Mood < prev5Mood) return 'decrease';\n  return 'equal';\n}\n\n/**\n * Compares the average sleep hours of the last 5 check-ins with the previous 5.\n * @param entries Array of MoodEntry objects\n * @returns 'increase', 'decrease', or 'equal' for sleep comparison\n */\nexport function compareLast5WithPrevious5Sleep(entries: LogEntry[]): TendencyType {\n  if (!Array.isArray(entries) || entries.length < 10) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...entries].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const prev5 = sorted.slice(5, 10);\n\n  const avgSleep = (arr: LogEntry[]) =>\n    arr.reduce((acc, entry) => acc + entry.sleepHours, 0) / arr.length;\n  const last5Sleep = avgSleep(last5);\n  const prev5Sleep = avgSleep(prev5);\n\n  if (last5Sleep > prev5Sleep) return 'increase';\n  if (last5Sleep < prev5Sleep) return 'decrease';\n  return 'equal';\n}\n\n/**\n * Checks if a value is empty (null or undefined).\n * @param value The numeric value to check\n * @returns true if the value is null or undefined, false otherwise\n */\nexport function isValueEmpty(value: number | null | undefined) {\n  return value === null || value === undefined;\n}\n"],"names":[],"mappings":";;;;;;;AASO,SAAS,wBAAwB,KAAiB;IACvD,IAAI,CAAC,MAAM,OAAO,CAAC,UAAU,MAAM,MAAM,GAAG,GAAG,OAAO;IACtD,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAM,CAAC,IAAI,CAC5B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,MAAM,MAAM,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,IAAI,EAAE;IAC3D,MAAM,MAAM,KAAK,KAAK,CAAC,MAAM;IAC7B,OAAO;AACT;AAEA,SAAS,kBAAkB,KAAa;IACtC,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,OAAO;AACT;AAOO,SAAS,yBAAyB,IAAgB;IACvD,IAAI,CAAC,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,GAAG,GAAG,OAAO;IACpD,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAK,CAAC,IAAI,CAC3B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,MAAM,MAAM,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,UAAU,EAAE;IACjE,MAAM,MAAM,KAAK,KAAK,CAAC,MAAM;IAC7B,OAAO,kBAAkB;AAC3B;AAOO,SAAS,8BAA8B,OAAmB;IAC/D,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,QAAQ,MAAM,GAAG,IAAI,OAAO;IAC3D,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAQ,CAAC,IAAI,CAC9B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAE9B,MAAM,UAAU,CAAC,MAAoB,IAAI,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,IAAI,EAAE,KAAK,IAAI,MAAM;IACjG,MAAM,YAAY,QAAQ;IAC1B,MAAM,YAAY,QAAQ;IAE1B,IAAI,YAAY,WAAW,OAAO;IAClC,IAAI,YAAY,WAAW,OAAO;IAClC,OAAO;AACT;AAOO,SAAS,+BAA+B,OAAmB;IAChE,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,QAAQ,MAAM,GAAG,IAAI,OAAO;IAC3D,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAQ,CAAC,IAAI,CAC9B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAE9B,MAAM,WAAW,CAAC,MAChB,IAAI,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,UAAU,EAAE,KAAK,IAAI,MAAM;IACpE,MAAM,aAAa,SAAS;IAC5B,MAAM,aAAa,SAAS;IAE5B,IAAI,aAAa,YAAY,OAAO;IACpC,IAAI,aAAa,YAAY,OAAO;IACpC,OAAO;AACT;AAOO,SAAS,aAAa,KAAgC;IAC3D,OAAO,UAAU,QAAQ,UAAU;AACrC","debugId":null}},
    {"offset": {"line": 1292, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/AverageCard.tsx"],"sourcesContent":["\ntype Props = {\n  children: React.ReactNode;\n  title: string;\n  backgroundColor: string;\n};\n\n\nconst AverageCard = ({ children, title, backgroundColor }: Props) => {\n\n  return (\n    <div className=\"flex flex-col gap-150\">\n      <p className=\"preset-5 text-neutral-900\">\n        {title}\n        <span className=\"preset-7 text-neutral-600\"> (Last 5 Check-ins)</span>\n      </p>\n      <div\n        className={`${backgroundColor} rounded-16 px-200 py-300 flex flex-col gap-150 relative overflow-hidden`}\n      >\n        {/* Decorative background image */}\n        <img\n          src=\"/images/bg-pattern-averages.svg\"\n          alt=\"\"\n          aria-hidden=\"true\"\n          className=\"absolute right-0 top-1/2 -translate-y-1/2 size-[200%] translate-x-5/8 pointer-events-none select-none\"\n          style={{ zIndex: 0 }}\n        />\n        <div className=\"relative z-10\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AverageCard;"],"names":[],"mappings":";;;;;AAQA,MAAM,cAAc,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAe,EAAS;IAE9D,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAE,WAAU;;oBACV;kCACD,6LAAC;wBAAK,WAAU;kCAA4B;;;;;;;;;;;;0BAE9C,6LAAC;gBACC,WAAW,GAAG,gBAAgB,wEAAwE,CAAC;;kCAGvG,6LAAC;wBACC,KAAI;wBACJ,KAAI;wBACJ,eAAY;wBACZ,WAAU;wBACV,OAAO;4BAAE,QAAQ;wBAAE;;;;;;kCAErB,6LAAC;wBAAI,WAAU;kCACZ;;;;;;;;;;;;;;;;;;AAKX;KAzBM;uCA2BS","debugId":null}},
    {"offset": {"line": 1369, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/TendancyLine.tsx"],"sourcesContent":["import Image from 'next/image';\nimport { TendencyType } from '@/types';\n\ninterface TendancyLineProps {\n  tendency: TendencyType;\n  className?: string;\n}\n\nconst TendancyLine = ({ tendency, className = '' }: TendancyLineProps) => {\n  const getIconSrc = (tendency: TendencyType): string => {\n    switch (tendency) {\n      case 'increase':\n        return '/images/icon-trend-increase.svg';\n      case 'decrease':\n        return '/images/icon-trend-decrease.svg';\n      case 'equal':\n        return '/images/icon-trend-same.svg';\n      default:\n        return '/images/icon-trend-same.svg';\n    }\n  };\n\n  const getLabel = (tendency: TendencyType): string => {\n    switch (tendency) {\n      case 'increase':\n        return 'Increase from the previous 5 check-ins';\n      case 'decrease':\n        return 'Decrease from the previous 5 check-ins';\n      case 'equal':\n        return 'Same as the previous 5 check-ins';\n      default:\n        return 'Same as the previous 5 check-ins';\n    }\n  };\n\n  return (\n    <div className={`flex items-start gap-100 ${className}`}>\n      <Image\n        src={getIconSrc(tendency)}\n        alt={`${tendency} trend`}\n        width={16}\n        height={16}\n        className=\"pt-025 flex-shrink-0\"\n      />\n      <span className=\"preset-7\">{getLabel(tendency)}</span>\n    </div>\n  );\n};\n\nexport default TendancyLine;\n"],"names":[],"mappings":";;;;AAAA;;;AAQA,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAqB;IACnE,MAAM,aAAa,CAAC;QAClB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,WAAW,CAAC;QAChB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,qBACE,6LAAC;QAAI,WAAW,CAAC,yBAAyB,EAAE,WAAW;;0BACrD,6LAAC,gIAAA,CAAA,UAAK;gBACJ,KAAK,WAAW;gBAChB,KAAK,GAAG,SAAS,MAAM,CAAC;gBACxB,OAAO;gBACP,QAAQ;gBACR,WAAU;;;;;;0BAEZ,6LAAC;gBAAK,WAAU;0BAAY,SAAS;;;;;;;;;;;;AAG3C;KAvCM;uCAyCS","debugId":null}},
    {"offset": {"line": 1443, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/MoodAverageCard.tsx"],"sourcesContent":["// src/components/AverageCard.tsx\n\nimport { getMood, MoodValue } from '@/app/lib/moods';\nimport AverageCard from './AverageCard';\nimport { useEffect, useState } from 'react';\nimport TendancyLine from './TendancyLine';\nimport { compareLast5WithPrevious5Mood, isValueEmpty } from '@/app/lib/utils/utils';\nimport { LogEntry } from '@/types';\n\ntype Props = {\n  value?: MoodValue | null;\n  logs: LogEntry[];\n};\n\nconst MoodAverageCard = ({ value, logs }: Props) => {\n  const [empty, setEmpty] = useState(isValueEmpty(value));\n  const [mood, setMood] = useState(() =>\n    !isValueEmpty(value) ? getMood(value as MoodValue) : null\n  );\n\n  useEffect(() => {\n    const isEmpty = isValueEmpty(value);\n    setEmpty(isEmpty);\n    setMood(!isEmpty ? getMood(value as MoodValue) : null);\n  }, [value]);\n\n  const backgroundColor = !empty ? mood!.color : 'bg-blue-100';\n\n  const title = !empty ? mood!.label : 'Keep tracking!';\n\n  return (\n    <AverageCard title=\"Average Mood\" backgroundColor={backgroundColor}>\n      <div className=\"flex flex-col justify-start gap-150\">\n        <div className=\"flex items-center gap-200\">\n          {!empty && <img src={mood!.icon.white} alt=\"\" aria-hidden=\"true\" className=\"size-300\" />}\n\n          <p className=\"preset-4 font-semibold text-neutral-900\">{title}</p>\n        </div>\n        {!empty ? (\n          <TendancyLine\n            tendency={compareLast5WithPrevious5Mood(logs)}\n            className=\"text-neutral-900\"\n          />\n        ) : (\n          <p className=\"preset-7 text-neutral-600\">Log 5 check-ins to see your average mood.</p>\n        )}\n      </div>\n    </AverageCard>\n  );\n};\n\nexport default MoodAverageCard;\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAEjC;AACA;AACA;AACA;AACA;;;;;;;;AAQA,MAAM,kBAAkB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAS;;IAC7C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE;IAChD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;oCAAE,IAC/B,CAAC,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE,SAAS,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE,SAAsB;;IAGvD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,MAAM,UAAU,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE;YAC7B,SAAS;YACT,QAAQ,CAAC,UAAU,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE,SAAsB;QACnD;oCAAG;QAAC;KAAM;IAEV,MAAM,kBAAkB,CAAC,QAAQ,KAAM,KAAK,GAAG;IAE/C,MAAM,QAAQ,CAAC,QAAQ,KAAM,KAAK,GAAG;IAErC,qBACE,6LAAC,mJAAA,CAAA,UAAW;QAAC,OAAM;QAAe,iBAAiB;kBACjD,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;wBACZ,CAAC,uBAAS,6LAAC;4BAAI,KAAK,KAAM,IAAI,CAAC,KAAK;4BAAE,KAAI;4BAAG,eAAY;4BAAO,WAAU;;;;;;sCAE3E,6LAAC;4BAAE,WAAU;sCAA2C;;;;;;;;;;;;gBAEzD,CAAC,sBACA,6LAAC,oJAAA,CAAA,UAAY;oBACX,UAAU,CAAA,GAAA,sIAAA,CAAA,gCAA6B,AAAD,EAAE;oBACxC,WAAU;;;;;yCAGZ,6LAAC;oBAAE,WAAU;8BAA4B;;;;;;;;;;;;;;;;;AAKnD;GAnCM;KAAA;uCAqCS","debugId":null}},
    {"offset": {"line": 1551, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/SleepAverageCard.tsx"],"sourcesContent":["import { getSleep, SleepValue } from '@/app/lib/sleep';\nimport { compareLast5WithPrevious5Sleep, isValueEmpty } from '@/app/lib/utils/utils';\nimport { LogEntry } from '@/types';\nimport { useEffect, useState } from 'react';\nimport AverageCard from './AverageCard';\nimport TendancyLine from './TendancyLine';\n\ntype Props = {\n  value?: SleepValue | null;\n  logs: LogEntry[];\n};\n\nconst SleepAverageCard = ({ value, logs }: Props) => {\n  const [empty, setEmpty] = useState(isValueEmpty(value));\n  const [sleep, setSleep] = useState(() => (!isValueEmpty(value) ? getSleep(value) : null));\n\n  useEffect(() => {\n    const isEmpty = isValueEmpty(value);\n    setEmpty(isEmpty);\n    setSleep(!isEmpty ? getSleep(value) : null);\n  }, [value]);\n\n  const backgroundColor = !empty ? 'bg-blue-600' : 'bg-blue-100';\n\n  const title = !empty ? sleep : 'Not enough data yet!';\n\n  return (\n    <AverageCard title=\"Average Sleep\" backgroundColor={backgroundColor}>\n      <div className=\"flex flex-col justify-start gap-150\">\n        <div className=\"flex items-center gap-200\">\n          {!empty && (\n            <img src=\"/images/icon-sleep.svg\" alt=\"\" aria-hidden=\"true\" className=\"size-300\" />\n          )}\n          <p className=\"preset-4 font-semibold text-neutral-900\">{title}</p>\n        </div>\n        {!empty ? (\n          <TendancyLine\n            tendency={compareLast5WithPrevious5Sleep(logs)}\n            className=\"text-neutral-900\"\n          />\n        ) : (\n          <p className=\"preset-7 text-neutral-600\">Log 5 check-ins to see your average mood.</p>\n        )}\n      </div>\n    </AverageCard>\n  );\n};\n\nexport default SleepAverageCard;\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;AACA;;;;;;;;AAOA,MAAM,mBAAmB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAS;;IAC9C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;qCAAE,IAAO,CAAC,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE,SAAS,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD,EAAE,SAAS;;IAEnF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,MAAM,UAAU,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE;YAC7B,SAAS;YACT,SAAS,CAAC,UAAU,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD,EAAE,SAAS;QACxC;qCAAG;QAAC;KAAM;IAEV,MAAM,kBAAkB,CAAC,QAAQ,gBAAgB;IAEjD,MAAM,QAAQ,CAAC,QAAQ,QAAQ;IAE/B,qBACE,6LAAC,mJAAA,CAAA,UAAW;QAAC,OAAM;QAAgB,iBAAiB;kBAClD,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;wBACZ,CAAC,uBACA,6LAAC;4BAAI,KAAI;4BAAyB,KAAI;4BAAG,eAAY;4BAAO,WAAU;;;;;;sCAExE,6LAAC;4BAAE,WAAU;sCAA2C;;;;;;;;;;;;gBAEzD,CAAC,sBACA,6LAAC,oJAAA,CAAA,UAAY;oBACX,UAAU,CAAA,GAAA,sIAAA,CAAA,iCAA8B,AAAD,EAAE;oBACzC,WAAU;;;;;yCAGZ,6LAAC;oBAAE,WAAU;8BAA4B;;;;;;;;;;;;;;;;;AAKnD;GAlCM;KAAA;uCAoCS","debugId":null}},
    {"offset": {"line": 1658, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/RadioButton.tsx"],"sourcesContent":["interface RadioButtonProps {\n  value: string;\n  checked: boolean;\n  onChange: () => void;\n  children: React.ReactNode;\n}\n\nconst RadioButton = ({ value, checked, onChange, children }: RadioButtonProps) => {\n  return (\n    <label\n      key={value}\n      className={`bg-neutral-0 flex items-center justify-between gap-150 rounded-xl border border-2 px-200 py-150 ${\n        checked ? 'border-blue-600' : 'border-blue-100'\n      }`}\n    >\n      <input\n        type=\"radio\"\n        name=\"mood\"\n        value={value}\n        checked={checked}\n        onChange={onChange}\n        className=\"peer hidden\"\n      />\n      <div\n        className={`flex h-250 w-250 items-center justify-center rounded-full border-2 border-blue-100 transition peer-checked:border-[6px] peer-checked:border-blue-600`}\n      ></div>\n      {children}\n    </label>\n  );\n};\n\nexport default RadioButton;\n"],"names":[],"mappings":";;;;;AAOA,MAAM,cAAc,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAoB;IAC3E,qBACE,6LAAC;QAEC,WAAW,CAAC,gGAAgG,EAC1G,UAAU,oBAAoB,mBAC9B;;0BAEF,6LAAC;gBACC,MAAK;gBACL,MAAK;gBACL,OAAO;gBACP,SAAS;gBACT,UAAU;gBACV,WAAU;;;;;;0BAEZ,6LAAC;gBACC,WAAW,CAAC,oJAAoJ,CAAC;;;;;;YAElK;;OAhBI;;;;;AAmBX;KAtBM;uCAwBS","debugId":null}},
    {"offset": {"line": 1707, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogModal/StepMood.tsx"],"sourcesContent":["import { getMood, MoodValue } from '@/app/lib/moods';\nimport Button from '../Button/Button';\nimport RadioButton from '../RadioButton';\n\ninterface StepMoodProps {\n  mood: MoodValue | null;\n  onSelect: (mood: MoodValue) => void;\n  onNext: () => void;\n}\n\nconst StepMood = ({ mood, onSelect, onNext }: StepMoodProps) => {\n  const moodValues: MoodValue[] = [-2, -1, 0, 1, 2];\n\n  return (\n    <>\n      <h3 className=\"preset-3 font-bold text-neutral-900\">How was your mood today?</h3>\n      <div className=\"flex flex-col gap-150\">\n        {moodValues.map((value) => {\n          const data = getMood(value);\n          return (\n            <RadioButton\n              key={value}\n              value={value.toString()}\n              checked={mood === value}\n              onChange={() => onSelect(value)}\n            >\n              <span className=\"preset-5 flex-1 font-semibold text-neutral-900\">{data.label}</span>\n              <img src={data.icon.color} alt={data.label} className=\"h-500 w-500\" />\n            </RadioButton>\n          );\n        })}\n      </div>\n      <Button label=\"Continue\" onClick={onNext} disabled={mood === null} />\n    </>\n  );\n};\n\nexport default StepMood;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAQA,MAAM,WAAW,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAiB;IACzD,MAAM,aAA0B;QAAC,CAAC;QAAG,CAAC;QAAG;QAAG;QAAG;KAAE;IAEjD,qBACE;;0BACE,6LAAC;gBAAG,WAAU;0BAAsC;;;;;;0BACpD,6LAAC;gBAAI,WAAU;0BACZ,WAAW,GAAG,CAAC,CAAC;oBACf,MAAM,OAAO,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE;oBACrB,qBACE,6LAAC,oIAAA,CAAA,UAAW;wBAEV,OAAO,MAAM,QAAQ;wBACrB,SAAS,SAAS;wBAClB,UAAU,IAAM,SAAS;;0CAEzB,6LAAC;gCAAK,WAAU;0CAAkD,KAAK,KAAK;;;;;;0CAC5E,6LAAC;gCAAI,KAAK,KAAK,IAAI,CAAC,KAAK;gCAAE,KAAK,KAAK,KAAK;gCAAE,WAAU;;;;;;;uBANjD;;;;;gBASX;;;;;;0BAEF,6LAAC,yIAAA,CAAA,UAAM;gBAAC,OAAM;gBAAW,SAAS;gBAAQ,UAAU,SAAS;;;;;;;;AAGnE;KAzBM;uCA2BS","debugId":null}},
    {"offset": {"line": 1799, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/feelings.ts"],"sourcesContent":["export const FEELING_TAGS = [\n  'Joyful',\n  'Down',\n  'Anxious',\n  'Calm',\n  'Excited',\n  'Frustrated',\n  'Lonely',\n  'Grateful',\n  'Overwhelmed',\n  'Motivated',\n  'Irritable',\n  'Peaceful',\n  'Tired',\n  'Hopeful',\n  'Confident',\n  'Stressed',\n  'Content',\n  'Disappointed',\n  'Optimistic',\n  'Restless',\n];\n"],"names":[],"mappings":";;;AAAO,MAAM,eAAe;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD","debugId":null}},
    {"offset": {"line": 1833, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Checkbox.tsx"],"sourcesContent":["interface CheckboxProps {\n  tag: string;\n  isChecked: boolean;\n  handleChange: () => void;\n  disabled?: boolean;\n}\n\nconst Checkbox = ({ tag, isChecked, handleChange, disabled = false }: CheckboxProps) => {\n  return (\n    <label\n      className={`bg-neutral-0 rounded-10 flex cursor-pointer items-center gap-100 border border-blue-100 px-150 py-200 text-sm font-medium transition peer-checked:border-blue-600 ${\n        disabled ? 'cursor-not-allowed' : 'cursor-pointer'\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        value={tag}\n        checked={isChecked}\n        onChange={handleChange}\n        className=\"peer hidden\"\n        disabled={disabled}\n      />\n\n      {/* Custom checkbox square */}\n      <span\n        className={`relative flex h-4 w-4 items-center justify-center rounded-[4px] border border-blue-100 transition peer-checked:border-blue-600 peer-checked:bg-blue-600`}\n      >\n        {/* Checkmark */}\n        {isChecked && <img src=\"/images/icon-check.svg\" alt=\"Check\" className=\"h-100 w-100\" />}\n      </span>\n\n      <span className={`preset-6 ${disabled ? 'text-neutral-300' : 'text-neutral-900'}`}>\n        {tag}\n      </span>\n    </label>\n  );\n};\n\nexport default Checkbox;\n"],"names":[],"mappings":";;;;;AAOA,MAAM,WAAW,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,KAAK,EAAiB;IACjF,qBACE,6LAAC;QACC,WAAW,CAAC,kKAAkK,EAC5K,WAAW,uBAAuB,kBAClC;;0BAEF,6LAAC;gBACC,MAAK;gBACL,OAAO;gBACP,SAAS;gBACT,UAAU;gBACV,WAAU;gBACV,UAAU;;;;;;0BAIZ,6LAAC;gBACC,WAAW,CAAC,uJAAuJ,CAAC;0BAGnK,2BAAa,6LAAC;oBAAI,KAAI;oBAAyB,KAAI;oBAAQ,WAAU;;;;;;;;;;;0BAGxE,6LAAC;gBAAK,WAAW,CAAC,SAAS,EAAE,WAAW,qBAAqB,oBAAoB;0BAC9E;;;;;;;;;;;;AAIT;KA7BM;uCA+BS","debugId":null}},
    {"offset": {"line": 1898, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Button/FooterButtons.tsx"],"sourcesContent":["import Button from './Button';\n\ninterface FooterButtonsProps {\n  onBack: () => void;\n  onNext: () => void;\n  disabled?: boolean;\n  nextLabel?: string;\n}\n\nconst FooterButtons = ({\n  onBack,\n  onNext,\n  disabled = false,\n  nextLabel = 'Continue',\n}: FooterButtonsProps) => {\n  return (\n    <div className=\"flex w-full flex-col gap-150 md:flex-row\">\n      <Button className=\"md:w-1/2\" label=\"Back\" onClick={onBack} type=\"secondary\" />\n      <Button className=\"md:w-1/2\" label={nextLabel} onClick={onNext} disabled={disabled} />\n    </div>\n  );\n};\n\nexport default FooterButtons;\n"],"names":[],"mappings":";;;;AAAA;;;AASA,MAAM,gBAAgB,CAAC,EACrB,MAAM,EACN,MAAM,EACN,WAAW,KAAK,EAChB,YAAY,UAAU,EACH;IACnB,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,yIAAA,CAAA,UAAM;gBAAC,WAAU;gBAAW,OAAM;gBAAO,SAAS;gBAAQ,MAAK;;;;;;0BAChE,6LAAC,yIAAA,CAAA,UAAM;gBAAC,WAAU;gBAAW,OAAO;gBAAW,SAAS;gBAAQ,UAAU;;;;;;;;;;;;AAGhF;KAZM;uCAcS","debugId":null}},
    {"offset": {"line": 1949, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogModal/StepFeelings.tsx"],"sourcesContent":["import { FEELING_TAGS } from '@/app/lib/feelings';\nimport Checkbox from '../Checkbox';\nimport FooterButtons from '../Button/FooterButtons';\n\ninterface StepFeelingsProps {\n  selected: string[];\n  onChange: (tags: string[]) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nconst StepFeelings = ({ selected, onChange, onNext, onBack }: StepFeelingsProps) => {\n  const toggleTag = (tag: string) => {\n    if (selected.includes(tag)) {\n      onChange(selected.filter((t) => t !== tag));\n    } else if (selected.length < 3) {\n      onChange([...selected, tag]);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"gap-075 flex flex-col\">\n        <h3 className=\"preset-3 font-bold text-neutral-900\">How did you feel?</h3>\n        <p className=\"preset-6 text-neutral-600\">Select up to three tags:</p>\n      </div>\n\n      <div className=\"flex flex-wrap gap-x-200 gap-y-150\">\n        {FEELING_TAGS.map((tag) => {\n          const isSelected = selected.includes(tag);\n          return (\n            <Checkbox\n              key={tag}\n              tag={tag}\n              isChecked={isSelected}\n              handleChange={() => toggleTag(tag)}\n              disabled={selected.length >= 3 && !isSelected}\n            />\n          );\n        })}\n      </div>\n\n      <FooterButtons onBack={onBack} onNext={onNext} disabled={selected.length === 0} />\n    </>\n  );\n};\n\nexport default StepFeelings;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AASA,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAqB;IAC7E,MAAM,YAAY,CAAC;QACjB,IAAI,SAAS,QAAQ,CAAC,MAAM;YAC1B,SAAS,SAAS,MAAM,CAAC,CAAC,IAAM,MAAM;QACxC,OAAO,IAAI,SAAS,MAAM,GAAG,GAAG;YAC9B,SAAS;mBAAI;gBAAU;aAAI;QAC7B;IACF;IAEA,qBACE;;0BACE,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAsC;;;;;;kCACpD,6LAAC;wBAAE,WAAU;kCAA4B;;;;;;;;;;;;0BAG3C,6LAAC;gBAAI,WAAU;0BACZ,gIAAA,CAAA,eAAY,CAAC,GAAG,CAAC,CAAC;oBACjB,MAAM,aAAa,SAAS,QAAQ,CAAC;oBACrC,qBACE,6LAAC,iIAAA,CAAA,UAAQ;wBAEP,KAAK;wBACL,WAAW;wBACX,cAAc,IAAM,UAAU;wBAC9B,UAAU,SAAS,MAAM,IAAI,KAAK,CAAC;uBAJ9B;;;;;gBAOX;;;;;;0BAGF,6LAAC,gJAAA,CAAA,UAAa;gBAAC,QAAQ;gBAAQ,QAAQ;gBAAQ,UAAU,SAAS,MAAM,KAAK;;;;;;;;AAGnF;KAlCM;uCAoCS","debugId":null}},
    {"offset": {"line": 2043, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogModal/StepJournal.tsx"],"sourcesContent":["import FooterButtons from '../Button/FooterButtons';\n\ninterface StepJournalProps {\n  value: string;\n  onChange: (val: string) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nconst StepJournal = ({ value, onChange, onNext, onBack }: StepJournalProps) => {\n  const maxLength = 150;\n\n  return (\n    <>\n      <h3 className=\"preset-3 font-bold text-neutral-900\">Write about your day...</h3>\n\n      <div className=\"flex flex-col gap-100\">\n        <textarea\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"Today, I felt...\"\n          maxLength={maxLength}\n          rows={5}\n          className=\"bg-neutral-0 w-full resize-none rounded-xl border border-gray-300 px-200 py-150 placeholder:text-neutral-600 placeholder:italic focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n          style={{ fontSize: '18px', lineHeight: '130%', letterSpacing: '0px' }}\n        />\n\n        <span className=\"preset-8 self-end text-neutral-600\">\n          {value.length}/{maxLength}\n        </span>\n      </div>\n\n      <FooterButtons onBack={onBack} onNext={onNext} />\n    </>\n  );\n};\n\nexport default StepJournal;\n"],"names":[],"mappings":";;;;AAAA;;;AASA,MAAM,cAAc,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAoB;IACxE,MAAM,YAAY;IAElB,qBACE;;0BACE,6LAAC;gBAAG,WAAU;0BAAsC;;;;;;0BAEpD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,OAAO;wBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;wBACxC,aAAY;wBACZ,WAAW;wBACX,MAAM;wBACN,WAAU;wBACV,OAAO;4BAAE,UAAU;4BAAQ,YAAY;4BAAQ,eAAe;wBAAM;;;;;;kCAGtE,6LAAC;wBAAK,WAAU;;4BACb,MAAM,MAAM;4BAAC;4BAAE;;;;;;;;;;;;;0BAIpB,6LAAC,gJAAA,CAAA,UAAa;gBAAC,QAAQ;gBAAQ,QAAQ;;;;;;;;AAG7C;KA1BM;uCA4BS","debugId":null}},
    {"offset": {"line": 2124, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogModal/StepSleep.tsx"],"sourcesContent":["import { sleepMap, SleepValue } from '@/app/lib/sleep';\nimport FooterButtons from '../Button/FooterButtons';\nimport RadioButton from '../RadioButton';\n\ninterface StepSleepProps {\n  sleepHours: SleepValue | null;\n  onSelect: (val: SleepValue) => void;\n  onSubmit: () => void;\n  onBack: () => void;\n}\n\nconst sleepOptions: SleepValue[] = [9, 7.5, 5.5, 3.5, 1];\n\nconst StepSleep = ({ sleepHours, onSelect, onSubmit, onBack }: StepSleepProps) => {\n  return (\n    <>\n      <h3 className=\"preset-3 font-bold text-neutral-900\">\n        How many hours did you sleep last night?\n      </h3>\n\n      <div className=\"space-y-100\">\n        {sleepOptions.map((value) => (\n          <RadioButton\n            key={value}\n            value={value.toString()}\n            checked={sleepHours === value}\n            onChange={() => onSelect(value)}\n          >\n            <span className=\"preset-5 flex-1 font-semibold text-neutral-900\">\n              {sleepMap[value]}\n            </span>\n          </RadioButton>\n        ))}\n      </div>\n\n      <FooterButtons onBack={onBack} onNext={onSubmit} nextLabel=\"Submit\" />\n    </>\n  );\n};\n\nexport default StepSleep;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AASA,MAAM,eAA6B;IAAC;IAAG;IAAK;IAAK;IAAK;CAAE;AAExD,MAAM,YAAY,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAkB;IAC3E,qBACE;;0BACE,6LAAC;gBAAG,WAAU;0BAAsC;;;;;;0BAIpD,6LAAC;gBAAI,WAAU;0BACZ,aAAa,GAAG,CAAC,CAAC,sBACjB,6LAAC,oIAAA,CAAA,UAAW;wBAEV,OAAO,MAAM,QAAQ;wBACrB,SAAS,eAAe;wBACxB,UAAU,IAAM,SAAS;kCAEzB,cAAA,6LAAC;4BAAK,WAAU;sCACb,6HAAA,CAAA,WAAQ,CAAC,MAAM;;;;;;uBANb;;;;;;;;;;0BAYX,6LAAC,gJAAA,CAAA,UAAa;gBAAC,QAAQ;gBAAQ,QAAQ;gBAAU,WAAU;;;;;;;;AAGjE;KAzBM;uCA2BS","debugId":null}},
    {"offset": {"line": 2202, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogModal/Stepper.tsx"],"sourcesContent":["interface StepperProps {\n  current: number;\n}\n\nconst Stepper = ({ current }: StepperProps) => {\n  return (\n    <>\n      <div role=\"status\" className=\"sr-only\" aria-live=\"polite\">\n        Step {current + 1} of 4\n      </div>\n      <div\n        role=\"progressbar\"\n        aria-label=\"Form Step Progress\"\n        aria-valuenow={current}\n        aria-valuemin={1}\n        aria-valuemax={4}\n        className=\"grid grid-cols-4 gap-150\"\n      >\n        {Array.from({ length: 4 }).map((_, index) => {\n          const isCompletedOrCurrent = index <= current;\n\n          return (\n            <div\n              key={index}\n              className={`h-075 w-full rounded-full transition-all duration-300 ease-in-out ${isCompletedOrCurrent ? 'bg-blue-600' : 'bg-blue-100'} `}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Stepper;\n"],"names":[],"mappings":";;;;;AAIA,MAAM,UAAU,CAAC,EAAE,OAAO,EAAgB;IACxC,qBACE;;0BACE,6LAAC;gBAAI,MAAK;gBAAS,WAAU;gBAAU,aAAU;;oBAAS;oBAClD,UAAU;oBAAE;;;;;;;0BAEpB,6LAAC;gBACC,MAAK;gBACL,cAAW;gBACX,iBAAe;gBACf,iBAAe;gBACf,iBAAe;gBACf,WAAU;0BAET,MAAM,IAAI,CAAC;oBAAE,QAAQ;gBAAE,GAAG,GAAG,CAAC,CAAC,GAAG;oBACjC,MAAM,uBAAuB,SAAS;oBAEtC,qBACE,6LAAC;wBAEC,WAAW,CAAC,kEAAkE,EAAE,uBAAuB,gBAAgB,cAAc,CAAC,CAAC;uBADlI;;;;;gBAIX;;;;;;;;AAIR;KA3BM;uCA6BS","debugId":null}},
    {"offset": {"line": 2264, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogModal/LogModal.tsx"],"sourcesContent":["import { useState } from 'react';\nimport StepMood from './StepMood';\nimport StepFeelings from './StepFeelings';\nimport StepJournal from './StepJournal';\nimport StepSleep from './StepSleep';\nimport Stepper from './Stepper';\nimport { LogFormData, submitLog } from '@/app/lib/api';\nimport { useLogStore } from '@/app/store/logStore';\n\ninterface LogModalProps {\n  onClose: () => void;\n}\n\nconst LogModal = ({ onClose }: LogModalProps) => {\n  const { addLog } = useLogStore();\n  const [step, setStep] = useState(0);\n  const [formData, setFormData] = useState<LogFormData>({\n    mood: null,\n    feelings: [],\n    journalEntry: '',\n    sleepHours: null,\n  });\n\n  const handleNext = () => setStep((prev) => prev + 1);\n  const handleBack = () => setStep((prev) => prev - 1);\n\n  const updateFormData = (updates: Partial<LogFormData>) => {\n    setFormData((prev) => ({ ...prev, ...updates }));\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const result = await submitLog(formData);\n      addLog(result);\n      console.log('✅ Saved:', result);\n      onClose();\n    } catch (error) {\n      console.error('❌ Submission failed:', error);\n      alert('Something went wrong. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n      <div className=\"bg-gradient-light relative flex w-full max-w-xl flex-col gap-300 rounded-2xl px-250 py-400 shadow-lg md:gap-400 md:px-500 md:py-600\">\n        <button\n          className=\"absolute top-400 right-400 text-2xl text-neutral-300 hover:text-neutral-500\"\n          onClick={onClose}\n        >\n          &times;\n        </button>\n        <h2 className=\"preset-2 font-bold text-neutral-900\">Log your mood</h2>\n        <Stepper current={step} />\n        {/* Step content */}\n        {step === 0 && (\n          <StepMood\n            mood={formData.mood}\n            onSelect={(mood) => updateFormData({ mood })}\n            onNext={handleNext}\n          />\n        )}\n        {step === 1 && (\n          <StepFeelings\n            selected={formData.feelings}\n            onChange={(feelings) => updateFormData({ feelings })}\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        )}\n        {step === 2 && (\n          <StepJournal\n            value={formData.journalEntry}\n            onChange={(journalEntry) => updateFormData({ journalEntry })}\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        )}\n        {step === 3 && (\n          <StepSleep\n            sleepHours={formData.sleepHours}\n            onSelect={(sleepHours) => updateFormData({ sleepHours })}\n            onSubmit={handleSubmit}\n            onBack={handleBack}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LogModal;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAMA,MAAM,WAAW,CAAC,EAAE,OAAO,EAAiB;;IAC1C,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC7B,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;QACpD,MAAM;QACN,UAAU,EAAE;QACZ,cAAc;QACd,YAAY;IACd;IAEA,MAAM,aAAa,IAAM,QAAQ,CAAC,OAAS,OAAO;IAClD,MAAM,aAAa,IAAM,QAAQ,CAAC,OAAS,OAAO;IAElD,MAAM,iBAAiB,CAAC;QACtB,YAAY,CAAC,OAAS,CAAC;gBAAE,GAAG,IAAI;gBAAE,GAAG,OAAO;YAAC,CAAC;IAChD;IAEA,MAAM,eAAe;QACnB,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,2HAAA,CAAA,YAAS,AAAD,EAAE;YAC/B,OAAO;YACP,QAAQ,GAAG,CAAC,YAAY;YACxB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,MAAM;QACR;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBACC,WAAU;oBACV,SAAS;8BACV;;;;;;8BAGD,6LAAC;oBAAG,WAAU;8BAAsC;;;;;;8BACpD,6LAAC,4IAAA,CAAA,UAAO;oBAAC,SAAS;;;;;;gBAEjB,SAAS,mBACR,6LAAC,6IAAA,CAAA,UAAQ;oBACP,MAAM,SAAS,IAAI;oBACnB,UAAU,CAAC,OAAS,eAAe;4BAAE;wBAAK;oBAC1C,QAAQ;;;;;;gBAGX,SAAS,mBACR,6LAAC,iJAAA,CAAA,UAAY;oBACX,UAAU,SAAS,QAAQ;oBAC3B,UAAU,CAAC,WAAa,eAAe;4BAAE;wBAAS;oBAClD,QAAQ;oBACR,QAAQ;;;;;;gBAGX,SAAS,mBACR,6LAAC,gJAAA,CAAA,UAAW;oBACV,OAAO,SAAS,YAAY;oBAC5B,UAAU,CAAC,eAAiB,eAAe;4BAAE;wBAAa;oBAC1D,QAAQ;oBACR,QAAQ;;;;;;gBAGX,SAAS,mBACR,6LAAC,8IAAA,CAAA,UAAS;oBACR,YAAY,SAAS,UAAU;oBAC/B,UAAU,CAAC,aAAe,eAAe;4BAAE;wBAAW;oBACtD,UAAU;oBACV,QAAQ;;;;;;;;;;;;;;;;;AAMpB;GA3EM;;QACe,kIAAA,CAAA,cAAW;;;KAD1B;uCA6ES","debugId":null}},
    {"offset": {"line": 2421, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/page.tsx"],"sourcesContent":["'use client';\nimport Header from '@/components/Header';\nimport Greeting from '@/components/Greetings/Greetings';\nimport TrendChart from '@/components/TrendChart/TrendChart';\nimport Container from '@/components/Container';\nimport { useEffect, useState } from 'react';\nimport { getAverageMoodLast5Days, getAverageSleepLast5Days } from './lib/utils/utils';\nimport MoodAverageCard from '@/components/AverageCard/MoodAverageCard';\nimport SleepAverageCard from '@/components/AverageCard/SleepAverageCard';\nimport LogModal from '@/components/LogModal/LogModal';\nimport { useLogStore } from './store/logStore';\nimport { useQuoteStore } from './store/quoteStore';\n\nconst HomePage = () => {\n  const { logs, fetchLogs } = useLogStore();\n  const { fetchQuotes } = useQuoteStore();\n  const [showLogModal, setShowLogModal] = useState(false);\n\n  useEffect(() => {\n    async function loadData() {\n      try {\n        await fetchLogs();\n        await fetchQuotes();\n      } catch (err) {\n        console.error('Failed to load logs:', err);\n      }\n    }\n\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <main className=\"layout-grid px-200 pt-600 pb-1000 font-sans md:px-500 lg:gap-800\">\n        <Greeting className=\"area-greeting\" onOpenLogModal={() => setShowLogModal(true)} />\n\n        <Container as=\"section\" className=\"area-cards\">\n          <MoodAverageCard\n            value={logs.length > 0 ? getAverageMoodLast5Days(logs) : null}\n            logs={logs}\n          />\n          <SleepAverageCard\n            value={logs.length > 0 ? getAverageSleepLast5Days(logs) : null}\n            logs={logs}\n          />\n        </Container>\n\n        <TrendChart className=\"area-chart min-h-[420px]\" logs={logs} />\n        {showLogModal && <LogModal onClose={() => setShowLogModal(false)} />}\n      </main>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAXA;;;;;;;;;;;;AAaA,MAAM,WAAW;;IACf,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IACtC,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,oIAAA,CAAA,gBAAa,AAAD;IACpC,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,eAAe;gBACb,IAAI;oBACF,MAAM;oBACN,MAAM;gBACR,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,wBAAwB;gBACxC;YACF;YAEA;QACF;6BAAG,EAAE;IAEL,qBACE;;0BACE,6LAAC,+HAAA,CAAA,UAAM;;;;;0BACP,6LAAC;gBAAK,WAAU;;kCACd,6LAAC,+IAAA,CAAA,UAAQ;wBAAC,WAAU;wBAAgB,gBAAgB,IAAM,gBAAgB;;;;;;kCAE1E,6LAAC,kIAAA,CAAA,UAAS;wBAAC,IAAG;wBAAU,WAAU;;0CAChC,6LAAC,uJAAA,CAAA,UAAe;gCACd,OAAO,KAAK,MAAM,GAAG,IAAI,CAAA,GAAA,sIAAA,CAAA,0BAAuB,AAAD,EAAE,QAAQ;gCACzD,MAAM;;;;;;0CAER,6LAAC,wJAAA,CAAA,UAAgB;gCACf,OAAO,KAAK,MAAM,GAAG,IAAI,CAAA,GAAA,sIAAA,CAAA,2BAAwB,AAAD,EAAE,QAAQ;gCAC1D,MAAM;;;;;;;;;;;;kCAIV,6LAAC,iJAAA,CAAA,UAAU;wBAAC,WAAU;wBAA2B,MAAM;;;;;;oBACtD,8BAAgB,6LAAC,6IAAA,CAAA,UAAQ;wBAAC,SAAS,IAAM,gBAAgB;;;;;;;;;;;;;;AAIlE;GAxCM;;QACwB,kIAAA,CAAA,cAAW;QACf,oIAAA,CAAA,gBAAa;;;KAFjC;uCA0CS","debugId":null}}]
}