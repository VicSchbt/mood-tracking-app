{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Header.tsx"],"sourcesContent":["const Header = () => {\n    return (\n      <header className=\"flex justify-between items-center w-full px-200 pt-400\">\n        <div className=\"flex items-center gap-100\">\n          <img src=\"/images/logo.svg\" alt=\"Mood tracker logo\" className=\"h-full\" />\n        </div>\n        <img\n          src=\"/images/avatar-placeholder.svg\"\n          alt=\"User avatar\"\n          className=\"w-500 h-500 rounded-full\"\n        />\n      </header>\n    )\n  }\n\n  export default Header;"],"names":[],"mappings":";;;;;AAAA,MAAM,SAAS;IACX,qBACE,8OAAC;QAAO,WAAU;;0BAChB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,KAAI;oBAAmB,KAAI;oBAAoB,WAAU;;;;;;;;;;;0BAEhE,8OAAC;gBACC,KAAI;gBACJ,KAAI;gBACJ,WAAU;;;;;;;;;;;;AAIlB;uCAEe","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/LogMoodButton.tsx"],"sourcesContent":["const LogMoodButton = () => {\n    return (\n        <button className=\"bg-blue-600 text-neutral-0 preset-5 px-400 py-200 rounded-10 hover:bg-blue-700 focus:outline focus:ring-2 focus:ring-blue-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:bg-blue-200\">\n          Log today's mood\n        </button>\n    )\n}\n\nexport default LogMoodButton;\n  "],"names":[],"mappings":";;;;;AAAA,MAAM,gBAAgB;IAClB,qBACI,8OAAC;QAAO,WAAU;kBAAqM;;;;;;AAI/N;uCAEe","debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Greeting.tsx"],"sourcesContent":["import LogMoodButton from \"./LogMoodButton\";\n\ninterface GreetingProps {\n  className?: string;\n}\n\nconst Greeting = ({ className }: GreetingProps) => {\n    return (\n      <div className={`flex flex-col items-center justify-center gap-200 text-center ${className}`}>\n        <p className=\"preset-3-mobile md:preset-3 font-bold text-blue-600\">Hello, Lisa!</p>\n        <h1 className=\"preset-1-mobile md:preset-1 font-bold text-neutral-900\">How are you feeling today?</h1>\n        <p className=\"preset-6 text-neutral-600\">Wednesday, April 16th, 2025</p>\n        <LogMoodButton />\n      </div>\n    )\n}\n\nexport default Greeting;\n  "],"names":[],"mappings":";;;;AAAA;;;AAMA,MAAM,WAAW,CAAC,EAAE,SAAS,EAAiB;IAC1C,qBACE,8OAAC;QAAI,WAAW,CAAC,8DAA8D,EAAE,WAAW;;0BAC1F,8OAAC;gBAAE,WAAU;0BAAsD;;;;;;0BACnE,8OAAC;gBAAG,WAAU;0BAAyD;;;;;;0BACvE,8OAAC;gBAAE,WAAU;0BAA4B;;;;;;0BACzC,8OAAC,mIAAA,CAAA,UAAa;;;;;;;;;;;AAGtB;uCAEe","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/sleep.ts"],"sourcesContent":["export type SleepValue = 1 | 3.5 | 5.5 | 7.5 | 9.5;\n\nexport const sleepMap: Record<SleepValue, string> = {\n  1: '0-2 hours',\n  3.5: '2-4 hours',\n  5.5: '5-6 hours',\n  7.5: '7-8 hours',\n  9.5: '9+ hours',\n};\n\n/**\n * Converts a sleep value to a human-readable label\n * @param value - The sleep value (1, 3.5, 5.5, 7.5, or 9.5)\n * @returns The corresponding sleep duration label\n */\n\nexport function getSleep(value: SleepValue) {\n  return sleepMap[value];\n}\n"],"names":[],"mappings":";;;;AAEO,MAAM,WAAuC;IAClD,GAAG;IACH,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACP;AAQO,SAAS,SAAS,KAAiB;IACxC,OAAO,QAAQ,CAAC,MAAM;AACxB","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/Container.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface ContainerProps {\n  children: React.ReactNode;\n  as?: React.ElementType;\n  className?: string;\n}\n\nconst Container = ({ children, as: Component = \"div\", className }: ContainerProps) => {\n  return (\n    <Component className={`w-full rounded-16 bg-neutral-0 border border-blue-100 py-250 px-200 flex flex-col gap-300 ${className}`}>\n      {children}\n    </Component>\n  );\n};\n\nexport default Container;\n"],"names":[],"mappings":";;;;;AAQA,MAAM,YAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,YAAY,KAAK,EAAE,SAAS,EAAkB;IAC/E,qBACE,8OAAC;QAAU,WAAW,CAAC,0FAA0F,EAAE,WAAW;kBAC3H;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/moods.ts"],"sourcesContent":["// src/lib/moods.ts\nexport type MoodValue = -2 | -1 | 0 | 1 | 2;\n\ntype MoodConfig = {\n  value: MoodValue;\n  label: string;\n  color: string;\n  colorHex: string;\n  icon: {\n    white: string;\n    color: string;\n  };\n};\n\nexport const moodMap: Record<MoodValue, MoodConfig> = {\n  [-2]: {\n    value: -2,\n    label: 'Very Sad',\n    color: 'bg-red-300',\n    colorHex: '#FFB9B9',\n    icon: {\n      white: '/images/icon-very-sad-white.svg',\n      color: '/images/icon-very-sad-color.svg',\n    },\n  },\n  [-1]: {\n    value: -1,\n    label: 'Sad',\n    color: 'bg-indigo-200',\n    colorHex: '#B8B1FF',\n    icon: {\n      white: '/images/icon-sad-white.svg',\n      color: '/images/icon-sad-color.svg',\n    },\n  },\n  [0]: {\n    value: 0,\n    label: 'Neutral',\n    color: 'bg-blue-300',\n    colorHex: '#89CAFF',\n    icon: {\n      white: '/images/icon-neutral-white.svg',\n      color: '/images/icon-neutral-color.svg',\n    },\n  },\n  [1]: {\n    value: 1,\n    label: 'Happy',\n    color: 'bg-green-300',\n    colorHex: '#89E780',\n    icon: {\n      white: '/images/icon-happy-white.svg',\n      color: '/images/icon-happy-color.svg',\n    },\n  },\n  [2]: {\n    value: 2,\n    label: 'Very Happy',\n    color: 'bg-amber-300',\n    colorHex: '#FFC97C',\n    icon: {\n      white: '/images/icon-very-happy-white.svg',\n      color: '/images/icon-very-happy-color.svg',\n    },\n  },\n};\n/**\n * Converts a mood value to a human-readable label\n * @param value - The mood value (-2, -1, 0, 1, or 2)\n * @returns The corresponding mood label\n */\n\nexport function getMood(value: MoodValue) {\n  return moodMap[value];\n}\n"],"names":[],"mappings":"AAAA,mBAAmB;;;;;AAcZ,MAAM,UAAyC;IACpD,CAAC,CAAC,EAAE,EAAE;QACJ,OAAO,CAAC;QACR,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,CAAC,EAAE,EAAE;QACJ,OAAO,CAAC;QACR,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,EAAE,EAAE;QACH,OAAO;QACP,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,EAAE,EAAE;QACH,OAAO;QACP,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IACA,CAAC,EAAE,EAAE;QACH,OAAO;QACP,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;AACF;AAOO,SAAS,QAAQ,KAAgB;IACtC,OAAO,OAAO,CAAC,MAAM;AACvB","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/TrendChart.tsx"],"sourcesContent":["'use client';\nimport { getSleep, SleepValue } from '@/app/lib/sleep';\nimport Container from './Container';\nimport { LogEntry } from '@/types';\nimport { BarChart, Bar, YAxis, XAxis, Cell, ResponsiveContainer } from 'recharts';\nimport { getMood, MoodValue } from '@/app/lib/moods';\n\ninterface TrendChartProps {\n  className?: string;\n  logs: LogEntry[];\n}\n\nconst CustomXAxisTick = ({ x, y, payload }: any) => {\n  const date = new Date(payload.value);\n  const month = date.toLocaleDateString('en-US', { month: 'long' }); // e.g. \"April\"\n  const day = date.getDate(); // e.g. 12\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={12} dy={-4} textAnchor=\"middle\" fontSize=\"10\" fill=\"#1f2937\">\n        {month}\n      </text>\n      <text x={0} y={24} textAnchor=\"middle\" fontSize=\"10\" fontWeight=\"bold\" fill=\"#6b7280\">\n        {day}\n      </text>\n    </g>\n  );\n};\n\nconst TrendChart = ({ className, logs }: TrendChartProps) => {\n  console.log('chart logs', logs);\n  return (\n    <Container as=\"section\" className={className}>\n      <h2 className=\"preset-3-mobile md:preset-3 font-semibold text-neutral-900\">\n        Mood and sleep trends\n      </h2>\n      {logs && logs.length > 0 && (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={logs} margin={{ top: 20, right: 30, bottom: 10, left: 0 }}>\n            <YAxis\n              type=\"number\"\n              domain={[0, 9.5]}\n              ticks={[1, 3.5, 5.5, 7.5, 9.5]}\n              tickFormatter={(value) => getSleep(value as SleepValue)}\n              axisLine={false}\n              tickLine={false}\n            />\n            <XAxis\n              dataKey=\"createdAt\"\n              axisLine={false}\n              tickLine={false}\n              interval={0}\n              tick={<CustomXAxisTick />}\n            />\n            <Bar dataKey=\"sleepHours\" radius={[30, 30, 30, 30]} barSize={30}>\n              {logs.map((entry) => {\n                const mood = getMood(entry.mood as MoodValue);\n                return <Cell key={entry.createdAt} fill={mood.colorHex} />;\n              })}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default TrendChart;\n"],"names":[],"mappings":";;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;;;;;;AAYA,MAAM,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAO;IAC7C,MAAM,OAAO,IAAI,KAAK,QAAQ,KAAK;IACnC,MAAM,QAAQ,KAAK,kBAAkB,CAAC,SAAS;QAAE,OAAO;IAAO,IAAI,eAAe;IAClF,MAAM,MAAM,KAAK,OAAO,IAAI,UAAU;IAEtC,qBACE,8OAAC;QAAE,WAAW,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;;0BAClC,8OAAC;gBAAK,GAAG;gBAAG,GAAG;gBAAI,IAAI,CAAC;gBAAG,YAAW;gBAAS,UAAS;gBAAK,MAAK;0BAC/D;;;;;;0BAEH,8OAAC;gBAAK,GAAG;gBAAG,GAAG;gBAAI,YAAW;gBAAS,UAAS;gBAAK,YAAW;gBAAO,MAAK;0BACzE;;;;;;;;;;;;AAIT;AAEA,MAAM,aAAa,CAAC,EAAE,SAAS,EAAE,IAAI,EAAmB;IACtD,QAAQ,GAAG,CAAC,cAAc;IAC1B,qBACE,8OAAC,+HAAA,CAAA,UAAS;QAAC,IAAG;QAAU,WAAW;;0BACjC,8OAAC;gBAAG,WAAU;0BAA6D;;;;;;YAG1E,QAAQ,KAAK,MAAM,GAAG,mBACrB,8OAAC,mKAAA,CAAA,sBAAmB;gBAAC,OAAM;gBAAO,QAAO;0BACvC,cAAA,8OAAC,oJAAA,CAAA,WAAQ;oBAAC,MAAM;oBAAM,QAAQ;wBAAE,KAAK;wBAAI,OAAO;wBAAI,QAAQ;wBAAI,MAAM;oBAAE;;sCACtE,8OAAC,qJAAA,CAAA,QAAK;4BACJ,MAAK;4BACL,QAAQ;gCAAC;gCAAG;6BAAI;4BAChB,OAAO;gCAAC;gCAAG;gCAAK;gCAAK;gCAAK;6BAAI;4BAC9B,eAAe,CAAC,QAAU,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE;4BACnC,UAAU;4BACV,UAAU;;;;;;sCAEZ,8OAAC,qJAAA,CAAA,QAAK;4BACJ,SAAQ;4BACR,UAAU;4BACV,UAAU;4BACV,UAAU;4BACV,oBAAM,8OAAC;;;;;;;;;;sCAET,8OAAC,mJAAA,CAAA,MAAG;4BAAC,SAAQ;4BAAa,QAAQ;gCAAC;gCAAI;gCAAI;gCAAI;6BAAG;4BAAE,SAAS;sCAC1D,KAAK,GAAG,CAAC,CAAC;gCACT,MAAM,OAAO,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,MAAM,IAAI;gCAC/B,qBAAO,8OAAC,oJAAA,CAAA,OAAI;oCAAuB,MAAM,KAAK,QAAQ;mCAApC,MAAM,SAAS;;;;;4BACnC;;;;;;;;;;;;;;;;;;;;;;;AAOd;uCAEe","debugId":null}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/api.ts"],"sourcesContent":["import { LogEntry } from \"@/types\"\n\nexport async function fetchMoods(): Promise<LogEntry[]> {\n    const res = await fetch('http://localhost:3001/moodEntries')\n  \n    if (!res.ok) {\n      throw new Error('Failed to fetch moods')\n    }\n  \n    return res.json()\n  }"],"names":[],"mappings":";;;AAEO,eAAe;IAClB,MAAM,MAAM,MAAM,MAAM;IAExB,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,IAAI,IAAI;AACjB","debugId":null}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/lib/utils.ts"],"sourcesContent":["import { LogEntry, TendencyType } from '@/types';\nimport { MoodValue } from './moods';\nimport { SleepValue } from './sleep';\n\n/**\n * Calculates the average mood of the last 5 mood entries (by createdAt descending).\n * @param moods Array of MoodEntry objects\n * @returns Average mood (number) or null if fewer than 5 entries\n */\nexport function getAverageMoodLast5Days(moods: LogEntry[]): MoodValue | null {\n  if (!Array.isArray(moods) || moods.length < 5) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...moods].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const sum = last5.reduce((acc, entry) => acc + entry.mood, 0);\n  const avg = Math.round(sum / 5) as MoodValue;\n  return avg;\n}\n\nfunction roundToSleepValue(value: number): SleepValue {\n  if (value < 2) return 1;\n  if (value < 4) return 3.5;\n  if (value < 6) return 5.5;\n  if (value < 8) return 7.5;\n  return 9.5;\n}\n\n/**\n * Calculates the average sleep hours of the last 5 check-ins (by createdAt descending).\n * @param logs Array of LogEntry objects\n * @returns Average sleep hours (number) or null if fewer than 5 entries\n */\nexport function getAverageSleepLast5Days(logs: LogEntry[]): SleepValue | null {\n  if (!Array.isArray(logs) || logs.length < 5) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...logs].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const sum = last5.reduce((acc, entry) => acc + entry.sleepHours, 0);\n  const avg = Math.round(sum / 5);\n  return roundToSleepValue(avg);\n}\n\n/**\n * Compares the average mood of the last 5 check-ins with the previous 5.\n * @param entries Array of MoodEntry objects\n * @returns 'increase', 'decrease', or 'equal' for mood comparison\n */\nexport function compareLast5WithPrevious5Mood(entries: LogEntry[]): TendencyType {\n  if (!Array.isArray(entries) || entries.length < 10) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...entries].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const prev5 = sorted.slice(5, 10);\n\n  const avgMood = (arr: LogEntry[]) => arr.reduce((acc, entry) => acc + entry.mood, 0) / arr.length;\n  const last5Mood = avgMood(last5);\n  const prev5Mood = avgMood(prev5);\n\n  if (last5Mood > prev5Mood) return 'increase';\n  if (last5Mood < prev5Mood) return 'decrease';\n  return 'equal';\n}\n\n/**\n * Compares the average sleep hours of the last 5 check-ins with the previous 5.\n * @param entries Array of MoodEntry objects\n * @returns 'increase', 'decrease', or 'equal' for sleep comparison\n */\nexport function compareLast5WithPrevious5Sleep(entries: LogEntry[]): TendencyType {\n  if (!Array.isArray(entries) || entries.length < 10) return null;\n  // Sort by createdAt descending (most recent first)\n  const sorted = [...entries].sort(\n    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n  const last5 = sorted.slice(0, 5);\n  const prev5 = sorted.slice(5, 10);\n\n  const avgSleep = (arr: LogEntry[]) =>\n    arr.reduce((acc, entry) => acc + entry.sleepHours, 0) / arr.length;\n  const last5Sleep = avgSleep(last5);\n  const prev5Sleep = avgSleep(prev5);\n\n  if (last5Sleep > prev5Sleep) return 'increase';\n  if (last5Sleep < prev5Sleep) return 'decrease';\n  return 'equal';\n}\n\n/**\n * Checks if a value is empty (null or undefined).\n * @param value The numeric value to check\n * @returns true if the value is null or undefined, false otherwise\n */\nexport function isValueEmpty(value: number | null | undefined) {\n  return value === null || value === undefined;\n}\n"],"names":[],"mappings":";;;;;;;AASO,SAAS,wBAAwB,KAAiB;IACvD,IAAI,CAAC,MAAM,OAAO,CAAC,UAAU,MAAM,MAAM,GAAG,GAAG,OAAO;IACtD,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAM,CAAC,IAAI,CAC5B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,MAAM,MAAM,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,IAAI,EAAE;IAC3D,MAAM,MAAM,KAAK,KAAK,CAAC,MAAM;IAC7B,OAAO;AACT;AAEA,SAAS,kBAAkB,KAAa;IACtC,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,OAAO;AACT;AAOO,SAAS,yBAAyB,IAAgB;IACvD,IAAI,CAAC,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,GAAG,GAAG,OAAO;IACpD,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAK,CAAC,IAAI,CAC3B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,MAAM,MAAM,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,UAAU,EAAE;IACjE,MAAM,MAAM,KAAK,KAAK,CAAC,MAAM;IAC7B,OAAO,kBAAkB;AAC3B;AAOO,SAAS,8BAA8B,OAAmB;IAC/D,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,QAAQ,MAAM,GAAG,IAAI,OAAO;IAC3D,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAQ,CAAC,IAAI,CAC9B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAE9B,MAAM,UAAU,CAAC,MAAoB,IAAI,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,IAAI,EAAE,KAAK,IAAI,MAAM;IACjG,MAAM,YAAY,QAAQ;IAC1B,MAAM,YAAY,QAAQ;IAE1B,IAAI,YAAY,WAAW,OAAO;IAClC,IAAI,YAAY,WAAW,OAAO;IAClC,OAAO;AACT;AAOO,SAAS,+BAA+B,OAAmB;IAChE,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,QAAQ,MAAM,GAAG,IAAI,OAAO;IAC3D,mDAAmD;IACnD,MAAM,SAAS;WAAI;KAAQ,CAAC,IAAI,CAC9B,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IAE3E,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAC9B,MAAM,QAAQ,OAAO,KAAK,CAAC,GAAG;IAE9B,MAAM,WAAW,CAAC,MAChB,IAAI,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,UAAU,EAAE,KAAK,IAAI,MAAM;IACpE,MAAM,aAAa,SAAS;IAC5B,MAAM,aAAa,SAAS;IAE5B,IAAI,aAAa,YAAY,OAAO;IACpC,IAAI,aAAa,YAAY,OAAO;IACpC,OAAO;AACT;AAOO,SAAS,aAAa,KAAgC;IAC3D,OAAO,UAAU,QAAQ,UAAU;AACrC","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/AverageCard.tsx"],"sourcesContent":["\ntype Props = {\n  children: React.ReactNode;\n  title: string;\n  backgroundColor: string;\n};\n\n\nconst AverageCard = ({ children, title, backgroundColor }: Props) => {\n\n  return (\n    <div className=\"flex flex-col gap-150\">\n      <p className=\"preset-5 text-neutral-900\">\n        {title}\n        <span className=\"preset-7 text-neutral-600\"> (Last 5 Check-ins)</span>\n      </p>\n      <div\n        className={`${backgroundColor} rounded-16 px-200 py-300 flex flex-col gap-150 relative overflow-hidden`}\n      >\n        {/* Decorative background image */}\n        <img\n          src=\"/images/bg-pattern-averages.svg\"\n          alt=\"\"\n          aria-hidden=\"true\"\n          className=\"absolute right-0 top-1/2 -translate-y-1/2 size-[200%] translate-x-5/8 pointer-events-none select-none\"\n          style={{ zIndex: 0 }}\n        />\n        <div className=\"relative z-10\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AverageCard;"],"names":[],"mappings":";;;;;AAQA,MAAM,cAAc,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAe,EAAS;IAE9D,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAE,WAAU;;oBACV;kCACD,8OAAC;wBAAK,WAAU;kCAA4B;;;;;;;;;;;;0BAE9C,8OAAC;gBACC,WAAW,GAAG,gBAAgB,wEAAwE,CAAC;;kCAGvG,8OAAC;wBACC,KAAI;wBACJ,KAAI;wBACJ,eAAY;wBACZ,WAAU;wBACV,OAAO;4BAAE,QAAQ;wBAAE;;;;;;kCAErB,8OAAC;wBAAI,WAAU;kCACZ;;;;;;;;;;;;;;;;;;AAKX;uCAEe","debugId":null}},
    {"offset": {"line": 581, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/TendancyLine.tsx"],"sourcesContent":["import Image from 'next/image'\nimport { TendencyType } from '@/types'\n\n\ninterface TendancyLineProps {\n  tendency: TendencyType\n  className?: string\n}\n\nconst TendancyLine = ({ tendency, className = '' }: TendancyLineProps) => {\n  const getIconSrc = (tendency: TendencyType): string => {\n    switch (tendency) {\n      case 'increase':\n        return '/images/icon-trend-increase.svg'\n      case 'decrease':\n        return '/images/icon-trend-decrease.svg'\n      case 'equal':\n        return '/images/icon-trend-same.svg'\n      default:\n        return '/images/icon-trend-same.svg'\n    }\n  }\n\n  const getLabel = (tendency: TendencyType): string => {\n    switch (tendency) {\n      case 'increase':\n        return 'Increase from the previous 5 check-ins'\n      case 'decrease':\n        return 'Decrease from the previous 5 check-ins'\n      case 'equal':\n        return 'Same as the previous 5 check-ins'\n      default:\n        return 'Same as the previous 5 check-ins'\n    }\n  }\n\n  \n\n  return (\n    <div className={`flex items-center gap-100 ${className}`}>\n      <Image\n        src={getIconSrc(tendency)}\n        alt={`${tendency} trend`}\n        width={16}\n        height={16}\n        className=\"flex-shrink-0\"\n      />\n      <span className=\"preset-7\">\n        {getLabel(tendency)}\n      </span>\n    </div>\n  )\n}\n\nexport default TendancyLine\n"],"names":[],"mappings":";;;;AAAA;;;AASA,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAqB;IACnE,MAAM,aAAa,CAAC;QAClB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,WAAW,CAAC;QAChB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAIA,qBACE,8OAAC;QAAI,WAAW,CAAC,0BAA0B,EAAE,WAAW;;0BACtD,8OAAC,6HAAA,CAAA,UAAK;gBACJ,KAAK,WAAW;gBAChB,KAAK,GAAG,SAAS,MAAM,CAAC;gBACxB,OAAO;gBACP,QAAQ;gBACR,WAAU;;;;;;0BAEZ,8OAAC;gBAAK,WAAU;0BACb,SAAS;;;;;;;;;;;;AAIlB;uCAEe","debugId":null}},
    {"offset": {"line": 649, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/MoodAverageCard.tsx"],"sourcesContent":["// src/components/AverageCard.tsx\n\nimport { getMood, MoodValue } from '@/app/lib/moods';\nimport AverageCard from './AverageCard';\nimport { useEffect, useState } from 'react';\nimport TendancyLine from './TendancyLine';\nimport { compareLast5WithPrevious5Mood, isValueEmpty } from '@/app/lib/utils';\nimport { LogEntry } from '@/types';\n\ntype Props = {\n  value?: MoodValue | null;\n  logs: LogEntry[];\n};\n\nconst MoodAverageCard = ({ value, logs }: Props) => {\n  const [empty, setEmpty] = useState(isValueEmpty(value));\n  const [mood, setMood] = useState(() =>\n    !isValueEmpty(value) ? getMood(value as MoodValue) : null\n  );\n\n  useEffect(() => {\n    const isEmpty = isValueEmpty(value);\n    setEmpty(isEmpty);\n    setMood(!isEmpty ? getMood(value as MoodValue) : null);\n  }, [value]);\n\n  const backgroundColor = !empty ? mood!.color : 'bg-blue-100';\n\n  const title = !empty ? mood!.label : 'Keep tracking!';\n\n  return (\n    <AverageCard title=\"Average Mood\" backgroundColor={backgroundColor}>\n      <div className=\"flex flex-col justify-start gap-150\">\n        <div className=\"flex items-center gap-200\">\n          {!empty && <img src={mood!.icon.color} alt=\"\" aria-hidden=\"true\" className=\"size-300\" />}\n\n          <p className=\"preset-4 font-semibold text-neutral-900\">{title}</p>\n        </div>\n        {!empty ? (\n          <TendancyLine\n            tendency={compareLast5WithPrevious5Mood(logs)}\n            className=\"text-neutral-900\"\n          />\n        ) : (\n          <p className=\"preset-7 text-neutral-600\">Log 5 check-ins to see your average mood.</p>\n        )}\n      </div>\n    </AverageCard>\n  );\n};\n\nexport default MoodAverageCard;\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAEjC;AACA;AACA;AACA;AACA;;;;;;;AAQA,MAAM,kBAAkB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAS;IAC7C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE;IAChD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAC/B,CAAC,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE,SAAS,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,SAAsB;IAGvD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,UAAU,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE;QAC7B,SAAS;QACT,QAAQ,CAAC,UAAU,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,SAAsB;IACnD,GAAG;QAAC;KAAM;IAEV,MAAM,kBAAkB,CAAC,QAAQ,KAAM,KAAK,GAAG;IAE/C,MAAM,QAAQ,CAAC,QAAQ,KAAM,KAAK,GAAG;IAErC,qBACE,8OAAC,gJAAA,CAAA,UAAW;QAAC,OAAM;QAAe,iBAAiB;kBACjD,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;wBACZ,CAAC,uBAAS,8OAAC;4BAAI,KAAK,KAAM,IAAI,CAAC,KAAK;4BAAE,KAAI;4BAAG,eAAY;4BAAO,WAAU;;;;;;sCAE3E,8OAAC;4BAAE,WAAU;sCAA2C;;;;;;;;;;;;gBAEzD,CAAC,sBACA,8OAAC,iJAAA,CAAA,UAAY;oBACX,UAAU,CAAA,GAAA,0HAAA,CAAA,gCAA6B,AAAD,EAAE;oBACxC,WAAU;;;;;yCAGZ,8OAAC;oBAAE,WAAU;8BAA4B;;;;;;;;;;;;;;;;;AAKnD;uCAEe","debugId":null}},
    {"offset": {"line": 744, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/components/AverageCard/SleepAverageCard.tsx"],"sourcesContent":["import { getSleep, SleepValue } from '@/app/lib/sleep';\nimport { compareLast5WithPrevious5Sleep, isValueEmpty } from '@/app/lib/utils';\nimport { LogEntry } from '@/types';\nimport { useEffect, useState } from 'react';\nimport AverageCard from './AverageCard';\nimport TendancyLine from './TendancyLine';\n\ntype Props = {\n  value?: SleepValue | null;\n  logs: LogEntry[];\n};\n\nconst SleepAverageCard = ({ value, logs }: Props) => {\n  const [empty, setEmpty] = useState(isValueEmpty(value));\n  const [sleep, setSleep] = useState(() => (!isValueEmpty(value) ? getSleep(value) : null));\n\n  useEffect(() => {\n    const isEmpty = isValueEmpty(value);\n    setEmpty(isEmpty);\n    setSleep(!isEmpty ? getSleep(value) : null);\n  }, [value]);\n\n  const backgroundColor = !empty ? 'bg-blue-600' : 'bg-blue-100';\n\n  const title = !empty ? sleep : 'Not enough data yet!';\n\n  return (\n    <AverageCard title=\"Average Sleep\" backgroundColor={backgroundColor}>\n      <div className=\"flex flex-col justify-start gap-150\">\n        <div className=\"flex items-center gap-200\">\n          {!empty && (\n            <img src=\"/images/icon-sleep.svg\" alt=\"\" aria-hidden=\"true\" className=\"size-300\" />\n          )}\n          <p className=\"preset-4 font-semibold text-neutral-900\">{title}</p>\n        </div>\n        {!empty ? (\n          <TendancyLine\n            tendency={compareLast5WithPrevious5Sleep(logs)}\n            className=\"text-neutral-900\"\n          />\n        ) : (\n          <p className=\"preset-7 text-neutral-600\">Log 5 check-ins to see your average mood.</p>\n        )}\n      </div>\n    </AverageCard>\n  );\n};\n\nexport default SleepAverageCard;\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;AACA;;;;;;;AAOA,MAAM,mBAAmB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAS;IAC9C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAO,CAAC,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE,SAAS,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE,SAAS;IAEnF,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,UAAU,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE;QAC7B,SAAS;QACT,SAAS,CAAC,UAAU,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE,SAAS;IACxC,GAAG;QAAC;KAAM;IAEV,MAAM,kBAAkB,CAAC,QAAQ,gBAAgB;IAEjD,MAAM,QAAQ,CAAC,QAAQ,QAAQ;IAE/B,qBACE,8OAAC,gJAAA,CAAA,UAAW;QAAC,OAAM;QAAgB,iBAAiB;kBAClD,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;wBACZ,CAAC,uBACA,8OAAC;4BAAI,KAAI;4BAAyB,KAAI;4BAAG,eAAY;4BAAO,WAAU;;;;;;sCAExE,8OAAC;4BAAE,WAAU;sCAA2C;;;;;;;;;;;;gBAEzD,CAAC,sBACA,8OAAC,iJAAA,CAAA,UAAY;oBACX,UAAU,CAAA,GAAA,0HAAA,CAAA,iCAA8B,AAAD,EAAE;oBACzC,WAAU;;;;;yCAGZ,8OAAC;oBAAE,WAAU;8BAA4B;;;;;;;;;;;;;;;;;AAKnD;uCAEe","debugId":null}},
    {"offset": {"line": 838, "column": 0}, "map": {"version":3,"sources":["file:///Users/victoirelenglart/Developer/PROJECTS/PERSONAL/mood-tracking-app/src/app/page.tsx"],"sourcesContent":["'use client';\nimport Header from '@/components/Header';\nimport Greeting from '@/components/Greeting';\nimport TrendChart from '@/components/TrendChart';\nimport Container from '@/components/Container';\nimport { useEffect, useState } from 'react';\nimport { fetchMoods } from './lib/api';\nimport { LogEntry } from '@/types';\nimport { getAverageMoodLast5Days, getAverageSleepLast5Days } from './lib/utils';\nimport MoodAverageCard from '@/components/AverageCard/MoodAverageCard';\nimport SleepAverageCard from '@/components/AverageCard/SleepAverageCard';\n\nconst HomePage = () => {\n  const [logs, setLogs] = useState<LogEntry[]>([]);\n\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const fetchedLogs = await fetchMoods();\n        setLogs(fetchedLogs);\n        console.log('Fetched logs:', fetchedLogs);\n      } catch (err) {\n        console.error('Failed to load logs:', err);\n      }\n    }\n\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <main className=\"layout-grid px-200 pt-600 pb-1000 font-sans md:px-500 lg:gap-800\">\n        <Greeting className=\"area-greeting\" />\n\n        <Container as=\"section\" className=\"area-cards\">\n          <MoodAverageCard\n            value={logs.length > 0 ? getAverageMoodLast5Days(logs) : null}\n            logs={logs}\n          />\n          <SleepAverageCard\n            value={logs.length > 0 ? getAverageSleepLast5Days(logs) : null}\n            logs={logs}\n          />\n        </Container>\n\n        <TrendChart className=\"area-chart\" logs={logs} />\n      </main>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAVA;;;;;;;;;;;AAYA,MAAM,WAAW;IACf,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IAE/C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe;YACb,IAAI;gBACF,MAAM,cAAc,MAAM,CAAA,GAAA,wHAAA,CAAA,aAAU,AAAD;gBACnC,QAAQ;gBACR,QAAQ,GAAG,CAAC,iBAAiB;YAC/B,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,wBAAwB;YACxC;QACF;QAEA;IACF,GAAG,EAAE;IAEL,qBACE;;0BACE,8OAAC,4HAAA,CAAA,UAAM;;;;;0BACP,8OAAC;gBAAK,WAAU;;kCACd,8OAAC,8HAAA,CAAA,UAAQ;wBAAC,WAAU;;;;;;kCAEpB,8OAAC,+HAAA,CAAA,UAAS;wBAAC,IAAG;wBAAU,WAAU;;0CAChC,8OAAC,oJAAA,CAAA,UAAe;gCACd,OAAO,KAAK,MAAM,GAAG,IAAI,CAAA,GAAA,0HAAA,CAAA,0BAAuB,AAAD,EAAE,QAAQ;gCACzD,MAAM;;;;;;0CAER,8OAAC,qJAAA,CAAA,UAAgB;gCACf,OAAO,KAAK,MAAM,GAAG,IAAI,CAAA,GAAA,0HAAA,CAAA,2BAAwB,AAAD,EAAE,QAAQ;gCAC1D,MAAM;;;;;;;;;;;;kCAIV,8OAAC,gIAAA,CAAA,UAAU;wBAAC,WAAU;wBAAa,MAAM;;;;;;;;;;;;;;AAIjD;uCAEe","debugId":null}}]
}